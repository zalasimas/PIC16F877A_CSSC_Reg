CCS PCM C Compiler, Version 5.008, 5967               25-birþ.-20 23:13

               Filename:   C:\Users\HP\Desktop\dok\proj\temp_controller\software\CSSC\main.lst

               ROM used:   2834 words (35%)
                           Largest free fragment is 2048
               RAM used:   9 (2%) at main() level
                           55 (15%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  08
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
....................              
....................   /*   
....................   Comparing two temperatures together. If upper temperature have reached set temperature,                             
....................   the water pump is switched on. After that, upper temperature is falling and bottom temperature                                                                            
....................   increasing. So, theoretically this two temperatures must face together.      
....................      
....................    If this theoretical model will be wrong, then will need to set reference temperature 
....................    (about 35 C). And compare bottom temperature with this reference. If bottom temperature will 
....................    reach reference - the water pump will be switched off. One more thing - reference temperature 
....................    must be set under real device working conditions. 
....................     
....................    by Simas Za  
....................    */ 
....................     
....................     
....................                                                                                                                                            
.................... //LCD module connections    
.................... #define LCD_RS_PIN      PIN_D0                                
.................... #define LCD_RW_PIN      PIN_D1 
.................... #define LCD_ENABLE_PIN  PIN_D2 
.................... #define LCD_DATA4       PIN_D3                                                                             
.................... #define LCD_DATA5       PIN_D4 
.................... #define LCD_DATA6       PIN_D5                              
.................... #define LCD_DATA7       PIN_D6                                  
.................... //End LCD module connections                                                   
....................                                       
....................                                                                                                                                     
.................... #include <16F877A.h>                          
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA D3,32
000D:  DATA 74,1D
000E:  DATA 20,10
000F:  DATA 00,00
0010:  DATA D0,3B
0011:  DATA 72,1D
0012:  DATA 20,10
0013:  DATA 00,01
0014:  DATA C3,1D
0015:  DATA 20,00
0016:  DATA C3,1D
0017:  DATA 20,00
0018:  DATA C3,1D
0019:  DATA 20,00
001A:  DATA C4,30
001B:  DATA F6,34
001C:  DATA 6B,36
001D:  DATA E9,3A
001E:  DATA 00,01
001F:  DATA 6B,36
0020:  DATA E1,34
0021:  DATA E4,30
0022:  DATA 21,00
0023:  DATA C3,1D
0024:  DATA 20,00
0025:  DATA 4F,33
0026:  DATA 66,10
0027:  DATA 00,01
0028:  DATA 4F,33
0029:  DATA 66,10
002A:  DATA 00,00
*
0173:  MOVF   0B,W
0174:  MOVWF  39
0175:  BCF    0B.7
0176:  BSF    03.5
0177:  BSF    03.6
0178:  BSF    0C.7
0179:  BSF    0C.0
017A:  NOP
017B:  NOP
017C:  BCF    03.5
017D:  MOVF   0C,W
017E:  ANDLW  7F
017F:  BTFSC  03.2
0180:  GOTO   1BA
0181:  BCF    03.6
0182:  MOVWF  3A
0183:  BSF    03.6
0184:  MOVF   0D,W
0185:  BCF    03.6
0186:  MOVWF  3B
0187:  BSF    03.6
0188:  MOVF   0F,W
0189:  BCF    03.6
018A:  MOVWF  3C
018B:  MOVF   3A,W
018C:  MOVWF  46
018D:  CALL   147
018E:  MOVF   3B,W
018F:  BSF    03.6
0190:  MOVWF  0D
0191:  BCF    03.6
0192:  MOVF   3C,W
0193:  BSF    03.6
0194:  MOVWF  0F
0195:  BSF    03.5
0196:  BSF    0C.7
0197:  BSF    0C.0
0198:  NOP
0199:  NOP
019A:  BCF    03.5
019B:  RLF    0C,W
019C:  RLF    0E,W
019D:  ANDLW  7F
019E:  BTFSC  03.2
019F:  GOTO   1BA
01A0:  BCF    03.6
01A1:  MOVWF  3A
01A2:  BSF    03.6
01A3:  MOVF   0D,W
01A4:  BCF    03.6
01A5:  MOVWF  3B
01A6:  BSF    03.6
01A7:  MOVF   0F,W
01A8:  BCF    03.6
01A9:  MOVWF  3C
01AA:  MOVF   3A,W
01AB:  MOVWF  46
01AC:  CALL   147
01AD:  MOVF   3B,W
01AE:  BSF    03.6
01AF:  MOVWF  0D
01B0:  BCF    03.6
01B1:  MOVF   3C,W
01B2:  BSF    03.6
01B3:  MOVWF  0F
01B4:  INCF   0D,F
01B5:  BTFSC  03.2
01B6:  INCF   0F,F
01B7:  BCF    03.6
01B8:  GOTO   176
01B9:  BSF    03.6
01BA:  BCF    03.6
01BB:  BTFSC  39.7
01BC:  BSF    0B.7
01BD:  RETURN
01BE:  BTFSC  03.1
01BF:  GOTO   1C3
01C0:  MOVLW  4E
01C1:  MOVWF  04
01C2:  BCF    03.7
01C3:  CLRF   77
01C4:  CLRF   78
01C5:  CLRF   79
01C6:  CLRF   7A
01C7:  CLRF   4E
01C8:  CLRF   4F
01C9:  CLRF   50
01CA:  CLRF   51
01CB:  MOVF   4D,W
01CC:  IORWF  4C,W
01CD:  IORWF  4B,W
01CE:  IORWF  4A,W
01CF:  BTFSC  03.2
01D0:  GOTO   201
01D1:  MOVLW  20
01D2:  MOVWF  52
01D3:  BCF    03.0
01D4:  RLF    46,F
01D5:  RLF    47,F
01D6:  RLF    48,F
01D7:  RLF    49,F
01D8:  RLF    4E,F
01D9:  RLF    4F,F
01DA:  RLF    50,F
01DB:  RLF    51,F
01DC:  MOVF   4D,W
01DD:  SUBWF  51,W
01DE:  BTFSS  03.2
01DF:  GOTO   1EA
01E0:  MOVF   4C,W
01E1:  SUBWF  50,W
01E2:  BTFSS  03.2
01E3:  GOTO   1EA
01E4:  MOVF   4B,W
01E5:  SUBWF  4F,W
01E6:  BTFSS  03.2
01E7:  GOTO   1EA
01E8:  MOVF   4A,W
01E9:  SUBWF  4E,W
01EA:  BTFSS  03.0
01EB:  GOTO   1FB
01EC:  MOVF   4A,W
01ED:  SUBWF  4E,F
01EE:  MOVF   4B,W
01EF:  BTFSS  03.0
01F0:  INCFSZ 4B,W
01F1:  SUBWF  4F,F
01F2:  MOVF   4C,W
01F3:  BTFSS  03.0
01F4:  INCFSZ 4C,W
01F5:  SUBWF  50,F
01F6:  MOVF   4D,W
01F7:  BTFSS  03.0
01F8:  INCFSZ 4D,W
01F9:  SUBWF  51,F
01FA:  BSF    03.0
01FB:  RLF    77,F
01FC:  RLF    78,F
01FD:  RLF    79,F
01FE:  RLF    7A,F
01FF:  DECFSZ 52,F
0200:  GOTO   1D3
0201:  MOVF   4E,W
0202:  MOVWF  00
0203:  INCF   04,F
0204:  MOVF   4F,W
0205:  MOVWF  00
0206:  INCF   04,F
0207:  MOVF   50,W
0208:  MOVWF  00
0209:  INCF   04,F
020A:  MOVF   51,W
020B:  MOVWF  00
020C:  RETURN
020D:  MOVF   04,W
020E:  MOVWF  3E
020F:  MOVF   3D,W
0210:  MOVWF  40
0211:  BTFSC  03.2
0212:  GOTO   29F
0213:  MOVF   3C,W
0214:  MOVWF  49
0215:  MOVF   3B,W
0216:  MOVWF  48
0217:  MOVF   3A,W
0218:  MOVWF  47
0219:  MOVF   39,W
021A:  MOVWF  46
021B:  CLRF   4D
021C:  CLRF   4C
021D:  MOVLW  20
021E:  MOVWF  4B
021F:  MOVLW  82
0220:  MOVWF  4A
0221:  MOVF   46,W
0222:  BTFSC  03.2
0223:  GOTO   291
0224:  MOVWF  4E
0225:  MOVF   4A,W
0226:  BTFSC  03.2
0227:  GOTO   291
0228:  ADDWF  4E,F
0229:  BTFSC  03.0
022A:  GOTO   232
022B:  MOVLW  7F
022C:  SUBWF  4E,F
022D:  BTFSS  03.0
022E:  GOTO   291
022F:  BTFSC  03.2
0230:  GOTO   291
0231:  GOTO   236
0232:  MOVLW  81
0233:  ADDWF  4E,F
0234:  BTFSC  03.0
0235:  GOTO   291
0236:  MOVF   4E,W
0237:  MOVWF  77
0238:  CLRF   78
0239:  CLRF   79
023A:  CLRF   7A
023B:  MOVF   47,W
023C:  MOVWF  52
023D:  BSF    52.7
023E:  MOVF   48,W
023F:  MOVWF  51
0240:  MOVF   49,W
0241:  MOVWF  50
0242:  MOVLW  18
0243:  MOVWF  4E
0244:  CLRF   4F
0245:  BTFSS  50.0
0246:  GOTO   25F
0247:  MOVF   4D,W
0248:  ADDWF  7A,F
0249:  BTFSS  03.0
024A:  GOTO   251
024B:  INCF   79,F
024C:  BTFSS  03.2
024D:  GOTO   251
024E:  INCF   78,F
024F:  BTFSC  03.2
0250:  BSF    4F.7
0251:  MOVF   4C,W
0252:  ADDWF  79,F
0253:  BTFSS  03.0
0254:  GOTO   258
0255:  INCF   78,F
0256:  BTFSC  03.2
0257:  BSF    4F.7
0258:  MOVF   4B,W
0259:  MOVWF  48
025A:  BSF    48.7
025B:  MOVF   48,W
025C:  ADDWF  78,F
025D:  BTFSC  03.0
025E:  BSF    4F.7
025F:  RLF    4F,F
0260:  RRF    78,F
0261:  RRF    79,F
0262:  RRF    7A,F
0263:  RRF    52,F
0264:  RRF    51,F
0265:  RRF    50,F
0266:  BCF    03.0
0267:  DECFSZ 4E,F
0268:  GOTO   244
0269:  MOVLW  01
026A:  ADDWF  77,F
026B:  BTFSC  03.0
026C:  GOTO   291
026D:  BTFSC  78.7
026E:  GOTO   276
026F:  RLF    52,F
0270:  RLF    7A,F
0271:  RLF    79,F
0272:  RLF    78,F
0273:  DECF   77,F
0274:  BTFSC  03.2
0275:  GOTO   291
0276:  BTFSS  52.7
0277:  GOTO   287
0278:  INCF   7A,F
0279:  BTFSS  03.2
027A:  GOTO   287
027B:  INCF   79,F
027C:  BTFSS  03.2
027D:  GOTO   287
027E:  INCF   78,F
027F:  BTFSS  03.2
0280:  GOTO   287
0281:  RRF    78,F
0282:  RRF    79,F
0283:  RRF    7A,F
0284:  INCF   77,F
0285:  BTFSC  03.2
0286:  GOTO   291
0287:  MOVF   47,W
0288:  MOVWF  4F
0289:  MOVF   4B,W
028A:  XORWF  4F,F
028B:  BTFSS  4F.7
028C:  GOTO   28F
028D:  BSF    78.7
028E:  GOTO   295
028F:  BCF    78.7
0290:  GOTO   295
0291:  CLRF   77
0292:  CLRF   78
0293:  CLRF   79
0294:  CLRF   7A
0295:  MOVF   7A,W
0296:  MOVWF  3C
0297:  MOVF   79,W
0298:  MOVWF  3B
0299:  MOVF   78,W
029A:  MOVWF  3A
029B:  MOVF   77,W
029C:  MOVWF  39
029D:  DECFSZ 40,F
029E:  GOTO   213
029F:  MOVF   3C,W
02A0:  MOVWF  49
02A1:  MOVF   3B,W
02A2:  MOVWF  48
02A3:  MOVF   3A,W
02A4:  MOVWF  47
02A5:  MOVF   39,W
02A6:  MOVWF  46
02A7:  MOVF   46,W
02A8:  SUBLW  B6
02A9:  MOVWF  46
02AA:  CLRF   7A
02AB:  MOVF   47,W
02AC:  MOVWF  4A
02AD:  BSF    47.7
02AE:  BCF    03.0
02AF:  RRF    47,F
02B0:  RRF    48,F
02B1:  RRF    49,F
02B2:  RRF    7A,F
02B3:  RRF    79,F
02B4:  RRF    78,F
02B5:  RRF    77,F
02B6:  DECFSZ 46,F
02B7:  GOTO   2AE
02B8:  BTFSS  4A.7
02B9:  GOTO   2C5
02BA:  COMF   77,F
02BB:  COMF   78,F
02BC:  COMF   79,F
02BD:  COMF   7A,F
02BE:  INCF   77,F
02BF:  BTFSC  03.2
02C0:  INCF   78,F
02C1:  BTFSC  03.2
02C2:  INCF   79,F
02C3:  BTFSC  03.2
02C4:  INCF   7A,F
02C5:  MOVF   7A,W
02C6:  MOVWF  3C
02C7:  MOVF   79,W
02C8:  MOVWF  3B
02C9:  MOVF   78,W
02CA:  MOVWF  3A
02CB:  MOVF   77,W
02CC:  MOVWF  39
02CD:  BTFSS  3C.7
02CE:  GOTO   2DC
02CF:  DECF   3E,F
02D0:  BSF    3E.5
02D1:  COMF   39,F
02D2:  COMF   3A,F
02D3:  COMF   3B,F
02D4:  COMF   3C,F
02D5:  INCF   39,F
02D6:  BTFSC  03.2
02D7:  INCF   3A,F
02D8:  BTFSC  03.2
02D9:  INCF   3B,F
02DA:  BTFSC  03.2
02DB:  INCF   3C,F
02DC:  MOVLW  3B
02DD:  MOVWF  45
02DE:  MOVLW  9A
02DF:  MOVWF  44
02E0:  MOVLW  CA
02E1:  MOVWF  43
02E2:  CLRF   42
02E3:  MOVLW  0A
02E4:  MOVWF  40
02E5:  MOVF   3D,W
02E6:  BTFSC  03.2
02E7:  INCF   3E,F
02E8:  BSF    03.1
02E9:  MOVLW  39
02EA:  MOVWF  04
02EB:  BCF    03.7
02EC:  MOVF   3C,W
02ED:  MOVWF  49
02EE:  MOVF   3B,W
02EF:  MOVWF  48
02F0:  MOVF   3A,W
02F1:  MOVWF  47
02F2:  MOVF   39,W
02F3:  MOVWF  46
02F4:  MOVF   45,W
02F5:  MOVWF  4D
02F6:  MOVF   44,W
02F7:  MOVWF  4C
02F8:  MOVF   43,W
02F9:  MOVWF  4B
02FA:  MOVF   42,W
02FB:  MOVWF  4A
02FC:  CALL   1BE
02FD:  MOVF   78,W
02FE:  MOVF   77,F
02FF:  BTFSS  03.2
0300:  GOTO   314
0301:  INCF   3D,W
0302:  SUBWF  40,W
0303:  BTFSC  03.2
0304:  GOTO   314
0305:  MOVF   3E,W
0306:  BTFSC  03.2
0307:  GOTO   316
0308:  ANDLW  0F
0309:  SUBWF  40,W
030A:  BTFSC  03.2
030B:  GOTO   30E
030C:  BTFSC  03.0
030D:  GOTO   346
030E:  BTFSC  3E.7
030F:  GOTO   346
0310:  BTFSC  3E.6
0311:  GOTO   316
0312:  MOVLW  20
0313:  GOTO   342
0314:  MOVLW  20
0315:  ANDWF  3E,F
0316:  BTFSS  3E.5
0317:  GOTO   324
0318:  BCF    3E.5
0319:  MOVF   3D,W
031A:  BTFSS  03.2
031B:  DECF   3E,F
031C:  MOVF   77,W
031D:  MOVWF  3E
031E:  MOVLW  2D
031F:  MOVWF  46
0320:  CALL   147
0321:  MOVF   3E,W
0322:  MOVWF  77
0323:  CLRF   3E
0324:  MOVF   3D,W
0325:  SUBWF  40,W
0326:  BTFSS  03.2
0327:  GOTO   332
0328:  MOVF   77,W
0329:  MOVWF  3E
032A:  MOVLW  2E
032B:  MOVWF  46
032C:  CALL   147
032D:  MOVF   3E,W
032E:  MOVWF  77
032F:  MOVLW  20
0330:  ANDWF  3E,F
0331:  MOVLW  00
0332:  MOVLW  30
0333:  BTFSS  3E.5
0334:  GOTO   342
0335:  BCF    3E.5
0336:  MOVF   3D,W
0337:  BTFSS  03.2
0338:  DECF   3E,F
0339:  MOVF   77,W
033A:  MOVWF  3E
033B:  MOVLW  2D
033C:  MOVWF  46
033D:  CALL   147
033E:  MOVF   3E,W
033F:  MOVWF  77
0340:  CLRF   3E
0341:  MOVLW  30
0342:  ADDWF  77,F
0343:  MOVF   77,W
0344:  MOVWF  46
0345:  CALL   147
0346:  BCF    03.1
0347:  MOVF   45,W
0348:  MOVWF  49
0349:  MOVF   44,W
034A:  MOVWF  48
034B:  MOVF   43,W
034C:  MOVWF  47
034D:  MOVF   42,W
034E:  MOVWF  46
034F:  CLRF   4D
0350:  CLRF   4C
0351:  CLRF   4B
0352:  MOVLW  0A
0353:  MOVWF  4A
0354:  CALL   1BE
0355:  MOVF   7A,W
0356:  MOVWF  45
0357:  MOVF   79,W
0358:  MOVWF  44
0359:  MOVF   78,W
035A:  MOVWF  43
035B:  MOVF   77,W
035C:  MOVWF  42
035D:  DECFSZ 40,F
035E:  GOTO   2E8
035F:  RETURN
*
044F:  MOVLW  8E
0450:  MOVWF  77
0451:  MOVF   3A,W
0452:  MOVWF  78
0453:  MOVF   39,W
0454:  MOVWF  79
0455:  CLRF   7A
0456:  BTFSS  3A.7
0457:  GOTO   45D
0458:  COMF   78,F
0459:  COMF   79,F
045A:  INCF   79,F
045B:  BTFSC  03.2
045C:  INCF   78,F
045D:  MOVF   78,F
045E:  BTFSS  03.2
045F:  GOTO   46A
0460:  MOVF   79,W
0461:  MOVWF  78
0462:  CLRF   79
0463:  MOVLW  08
0464:  SUBWF  77,F
0465:  MOVF   78,F
0466:  BTFSS  03.2
0467:  GOTO   46A
0468:  CLRF   77
0469:  GOTO   473
046A:  BCF    03.0
046B:  BTFSC  78.7
046C:  GOTO   471
046D:  RLF    79,F
046E:  RLF    78,F
046F:  DECF   77,F
0470:  GOTO   46A
0471:  BTFSS  3A.7
0472:  BCF    78.7
0473:  RETURN
0474:  MOVF   3D,W
0475:  BTFSC  03.2
0476:  GOTO   539
0477:  MOVWF  49
0478:  MOVF   41,W
0479:  BTFSC  03.2
047A:  GOTO   539
047B:  SUBWF  49,F
047C:  BTFSS  03.0
047D:  GOTO   483
047E:  MOVLW  7F
047F:  ADDWF  49,F
0480:  BTFSC  03.0
0481:  GOTO   539
0482:  GOTO   489
0483:  MOVLW  81
0484:  SUBWF  49,F
0485:  BTFSS  03.0
0486:  GOTO   539
0487:  BTFSC  03.2
0488:  GOTO   539
0489:  MOVF   49,W
048A:  MOVWF  77
048B:  CLRF   78
048C:  CLRF   79
048D:  CLRF   7A
048E:  CLRF   48
048F:  MOVF   3E,W
0490:  MOVWF  47
0491:  BSF    47.7
0492:  MOVF   3F,W
0493:  MOVWF  46
0494:  MOVF   40,W
0495:  MOVWF  45
0496:  MOVLW  19
0497:  MOVWF  49
0498:  MOVF   44,W
0499:  SUBWF  45,F
049A:  BTFSC  03.0
049B:  GOTO   4AC
049C:  MOVLW  01
049D:  SUBWF  46,F
049E:  BTFSC  03.0
049F:  GOTO   4AC
04A0:  SUBWF  47,F
04A1:  BTFSC  03.0
04A2:  GOTO   4AC
04A3:  SUBWF  48,F
04A4:  BTFSC  03.0
04A5:  GOTO   4AC
04A6:  INCF   48,F
04A7:  INCF   47,F
04A8:  INCF   46,F
04A9:  MOVF   44,W
04AA:  ADDWF  45,F
04AB:  GOTO   4DE
04AC:  MOVF   43,W
04AD:  SUBWF  46,F
04AE:  BTFSC  03.0
04AF:  GOTO   4C7
04B0:  MOVLW  01
04B1:  SUBWF  47,F
04B2:  BTFSC  03.0
04B3:  GOTO   4C7
04B4:  SUBWF  48,F
04B5:  BTFSC  03.0
04B6:  GOTO   4C7
04B7:  INCF   48,F
04B8:  INCF   47,F
04B9:  MOVF   43,W
04BA:  ADDWF  46,F
04BB:  MOVF   44,W
04BC:  ADDWF  45,F
04BD:  BTFSS  03.0
04BE:  GOTO   4DE
04BF:  INCF   46,F
04C0:  BTFSS  03.2
04C1:  GOTO   4DE
04C2:  INCF   47,F
04C3:  BTFSS  03.2
04C4:  GOTO   4DE
04C5:  INCF   48,F
04C6:  GOTO   4DE
04C7:  MOVF   42,W
04C8:  IORLW  80
04C9:  SUBWF  47,F
04CA:  BTFSC  03.0
04CB:  GOTO   4DD
04CC:  MOVLW  01
04CD:  SUBWF  48,F
04CE:  BTFSC  03.0
04CF:  GOTO   4DD
04D0:  INCF   48,F
04D1:  MOVF   42,W
04D2:  IORLW  80
04D3:  ADDWF  47,F
04D4:  MOVF   43,W
04D5:  ADDWF  46,F
04D6:  BTFSS  03.0
04D7:  GOTO   4BB
04D8:  INCF   47,F
04D9:  BTFSS  03.2
04DA:  GOTO   4BB
04DB:  INCF   48,F
04DC:  GOTO   4BB
04DD:  BSF    7A.0
04DE:  DECFSZ 49,F
04DF:  GOTO   4E1
04E0:  GOTO   4EC
04E1:  BCF    03.0
04E2:  RLF    45,F
04E3:  RLF    46,F
04E4:  RLF    47,F
04E5:  RLF    48,F
04E6:  BCF    03.0
04E7:  RLF    7A,F
04E8:  RLF    79,F
04E9:  RLF    78,F
04EA:  RLF    4A,F
04EB:  GOTO   498
04EC:  BTFSS  4A.0
04ED:  GOTO   4F4
04EE:  BCF    03.0
04EF:  RRF    78,F
04F0:  RRF    79,F
04F1:  RRF    7A,F
04F2:  RRF    4A,F
04F3:  GOTO   4F7
04F4:  DECF   77,F
04F5:  BTFSC  03.2
04F6:  GOTO   539
04F7:  BTFSC  4A.7
04F8:  GOTO   520
04F9:  BCF    03.0
04FA:  RLF    45,F
04FB:  RLF    46,F
04FC:  RLF    47,F
04FD:  RLF    48,F
04FE:  MOVF   44,W
04FF:  SUBWF  45,F
0500:  BTFSC  03.0
0501:  GOTO   50C
0502:  MOVLW  01
0503:  SUBWF  46,F
0504:  BTFSC  03.0
0505:  GOTO   50C
0506:  SUBWF  47,F
0507:  BTFSC  03.0
0508:  GOTO   50C
0509:  SUBWF  48,F
050A:  BTFSS  03.0
050B:  GOTO   52F
050C:  MOVF   43,W
050D:  SUBWF  46,F
050E:  BTFSC  03.0
050F:  GOTO   517
0510:  MOVLW  01
0511:  SUBWF  47,F
0512:  BTFSC  03.0
0513:  GOTO   517
0514:  SUBWF  48,F
0515:  BTFSS  03.0
0516:  GOTO   52F
0517:  MOVF   42,W
0518:  IORLW  80
0519:  SUBWF  47,F
051A:  BTFSC  03.0
051B:  GOTO   520
051C:  MOVLW  01
051D:  SUBWF  48,F
051E:  BTFSS  03.0
051F:  GOTO   52F
0520:  INCF   7A,F
0521:  BTFSS  03.2
0522:  GOTO   52F
0523:  INCF   79,F
0524:  BTFSS  03.2
0525:  GOTO   52F
0526:  INCF   78,F
0527:  BTFSS  03.2
0528:  GOTO   52F
0529:  INCF   77,F
052A:  BTFSC  03.2
052B:  GOTO   539
052C:  RRF    78,F
052D:  RRF    79,F
052E:  RRF    7A,F
052F:  MOVF   3E,W
0530:  MOVWF  49
0531:  MOVF   42,W
0532:  XORWF  49,F
0533:  BTFSS  49.7
0534:  GOTO   537
0535:  BSF    78.7
0536:  GOTO   53D
0537:  BCF    78.7
0538:  GOTO   53D
0539:  CLRF   77
053A:  CLRF   78
053B:  CLRF   79
053C:  CLRF   7A
053D:  RETURN
*
0620:  MOVLW  80
0621:  BTFSC  03.1
0622:  XORWF  3E,F
0623:  CLRF   43
0624:  CLRF   44
0625:  MOVF   3A,W
0626:  MOVWF  42
0627:  MOVF   3E,W
0628:  XORWF  42,F
0629:  MOVF   39,W
062A:  BTFSC  03.2
062B:  GOTO   710
062C:  MOVWF  41
062D:  MOVWF  77
062E:  MOVF   3D,W
062F:  BTFSC  03.2
0630:  GOTO   719
0631:  SUBWF  41,F
0632:  BTFSC  03.2
0633:  GOTO   6B5
0634:  BTFSS  03.0
0635:  GOTO   673
0636:  MOVF   3E,W
0637:  MOVWF  47
0638:  BSF    47.7
0639:  MOVF   3F,W
063A:  MOVWF  46
063B:  MOVF   40,W
063C:  MOVWF  45
063D:  CLRF   44
063E:  BCF    03.0
063F:  RRF    47,F
0640:  RRF    46,F
0641:  RRF    45,F
0642:  RRF    44,F
0643:  DECFSZ 41,F
0644:  GOTO   63D
0645:  BTFSS  42.7
0646:  GOTO   64A
0647:  BSF    43.0
0648:  GOTO   72D
0649:  BCF    43.0
064A:  BCF    41.0
064B:  BSF    43.4
064C:  MOVLW  3C
064D:  MOVWF  04
064E:  BCF    03.7
064F:  GOTO   742
0650:  BCF    43.4
0651:  BTFSC  42.7
0652:  GOTO   65D
0653:  BTFSS  41.0
0654:  GOTO   668
0655:  RRF    47,F
0656:  RRF    46,F
0657:  RRF    45,F
0658:  RRF    44,F
0659:  INCF   77,F
065A:  BTFSC  03.2
065B:  GOTO   728
065C:  GOTO   668
065D:  BTFSC  47.7
065E:  GOTO   66B
065F:  BCF    03.0
0660:  RLF    44,F
0661:  RLF    45,F
0662:  RLF    46,F
0663:  RLF    47,F
0664:  DECF   77,F
0665:  BTFSC  03.2
0666:  GOTO   728
0667:  GOTO   65D
0668:  BSF    43.6
0669:  GOTO   6D5
066A:  BCF    43.6
066B:  MOVF   3A,W
066C:  MOVWF  42
066D:  BTFSS  42.7
066E:  GOTO   671
066F:  BSF    47.7
0670:  GOTO   721
0671:  BCF    47.7
0672:  GOTO   721
0673:  MOVF   3D,W
0674:  MOVWF  41
0675:  MOVWF  77
0676:  MOVF   39,W
0677:  SUBWF  41,F
0678:  MOVF   3A,W
0679:  MOVWF  47
067A:  BSF    47.7
067B:  MOVF   3B,W
067C:  MOVWF  46
067D:  MOVF   3C,W
067E:  MOVWF  45
067F:  CLRF   44
0680:  BCF    03.0
0681:  RRF    47,F
0682:  RRF    46,F
0683:  RRF    45,F
0684:  RRF    44,F
0685:  DECFSZ 41,F
0686:  GOTO   67F
0687:  BTFSS  42.7
0688:  GOTO   68C
0689:  BSF    43.1
068A:  GOTO   72D
068B:  BCF    43.1
068C:  BCF    41.0
068D:  BSF    43.5
068E:  MOVLW  40
068F:  MOVWF  04
0690:  BCF    03.7
0691:  GOTO   742
0692:  BCF    43.5
0693:  BTFSC  42.7
0694:  GOTO   69F
0695:  BTFSS  41.0
0696:  GOTO   6AA
0697:  RRF    47,F
0698:  RRF    46,F
0699:  RRF    45,F
069A:  RRF    44,F
069B:  INCF   77,F
069C:  BTFSC  03.2
069D:  GOTO   728
069E:  GOTO   6AA
069F:  BTFSC  47.7
06A0:  GOTO   6AD
06A1:  BCF    03.0
06A2:  RLF    44,F
06A3:  RLF    45,F
06A4:  RLF    46,F
06A5:  RLF    47,F
06A6:  DECF   77,F
06A7:  BTFSC  03.2
06A8:  GOTO   728
06A9:  GOTO   69F
06AA:  BSF    43.7
06AB:  GOTO   6D5
06AC:  BCF    43.7
06AD:  MOVF   3E,W
06AE:  MOVWF  42
06AF:  BTFSS  42.7
06B0:  GOTO   6B3
06B1:  BSF    47.7
06B2:  GOTO   721
06B3:  BCF    47.7
06B4:  GOTO   721
06B5:  MOVF   3E,W
06B6:  MOVWF  47
06B7:  BSF    47.7
06B8:  MOVF   3F,W
06B9:  MOVWF  46
06BA:  MOVF   40,W
06BB:  MOVWF  45
06BC:  BTFSS  42.7
06BD:  GOTO   6C2
06BE:  BCF    47.7
06BF:  BSF    43.2
06C0:  GOTO   72D
06C1:  BCF    43.2
06C2:  CLRF   44
06C3:  BCF    41.0
06C4:  MOVLW  3C
06C5:  MOVWF  04
06C6:  BCF    03.7
06C7:  GOTO   742
06C8:  BTFSC  42.7
06C9:  GOTO   6EB
06CA:  MOVF   3A,W
06CB:  MOVWF  42
06CC:  BTFSS  41.0
06CD:  GOTO   6D5
06CE:  RRF    47,F
06CF:  RRF    46,F
06D0:  RRF    45,F
06D1:  RRF    44,F
06D2:  INCF   77,F
06D3:  BTFSC  03.2
06D4:  GOTO   728
06D5:  BTFSS  44.7
06D6:  GOTO   6E6
06D7:  INCF   45,F
06D8:  BTFSS  03.2
06D9:  GOTO   6E6
06DA:  INCF   46,F
06DB:  BTFSS  03.2
06DC:  GOTO   6E6
06DD:  INCF   47,F
06DE:  BTFSS  03.2
06DF:  GOTO   6E6
06E0:  RRF    47,F
06E1:  RRF    46,F
06E2:  RRF    45,F
06E3:  INCF   77,F
06E4:  BTFSC  03.2
06E5:  GOTO   728
06E6:  BTFSC  43.6
06E7:  GOTO   66A
06E8:  BTFSC  43.7
06E9:  GOTO   6AC
06EA:  GOTO   70A
06EB:  MOVLW  80
06EC:  XORWF  47,F
06ED:  BTFSS  47.7
06EE:  GOTO   6F3
06EF:  GOTO   72D
06F0:  MOVF   3E,W
06F1:  MOVWF  42
06F2:  GOTO   700
06F3:  MOVF   3A,W
06F4:  MOVWF  42
06F5:  MOVF   47,F
06F6:  BTFSS  03.2
06F7:  GOTO   700
06F8:  MOVF   46,F
06F9:  BTFSS  03.2
06FA:  GOTO   700
06FB:  MOVF   45,F
06FC:  BTFSS  03.2
06FD:  GOTO   700
06FE:  CLRF   77
06FF:  GOTO   721
0700:  BTFSC  47.7
0701:  GOTO   70A
0702:  BCF    03.0
0703:  RLF    44,F
0704:  RLF    45,F
0705:  RLF    46,F
0706:  RLF    47,F
0707:  DECFSZ 77,F
0708:  GOTO   700
0709:  GOTO   728
070A:  BTFSS  42.7
070B:  GOTO   70E
070C:  BSF    47.7
070D:  GOTO   721
070E:  BCF    47.7
070F:  GOTO   721
0710:  MOVF   3D,W
0711:  MOVWF  77
0712:  MOVF   3E,W
0713:  MOVWF  47
0714:  MOVF   3F,W
0715:  MOVWF  46
0716:  MOVF   40,W
0717:  MOVWF  45
0718:  GOTO   721
0719:  MOVF   39,W
071A:  MOVWF  77
071B:  MOVF   3A,W
071C:  MOVWF  47
071D:  MOVF   3B,W
071E:  MOVWF  46
071F:  MOVF   3C,W
0720:  MOVWF  45
0721:  MOVF   47,W
0722:  MOVWF  78
0723:  MOVF   46,W
0724:  MOVWF  79
0725:  MOVF   45,W
0726:  MOVWF  7A
0727:  GOTO   760
0728:  CLRF   77
0729:  CLRF   78
072A:  CLRF   79
072B:  CLRF   7A
072C:  GOTO   760
072D:  CLRF   44
072E:  COMF   45,F
072F:  COMF   46,F
0730:  COMF   47,F
0731:  COMF   44,F
0732:  INCF   44,F
0733:  BTFSS  03.2
0734:  GOTO   73B
0735:  INCF   45,F
0736:  BTFSS  03.2
0737:  GOTO   73B
0738:  INCF   46,F
0739:  BTFSC  03.2
073A:  INCF   47,F
073B:  BTFSC  43.0
073C:  GOTO   649
073D:  BTFSC  43.1
073E:  GOTO   68B
073F:  BTFSC  43.2
0740:  GOTO   6C1
0741:  GOTO   6F0
0742:  MOVF   00,W
0743:  ADDWF  45,F
0744:  BTFSS  03.0
0745:  GOTO   74C
0746:  INCF   46,F
0747:  BTFSS  03.2
0748:  GOTO   74C
0749:  INCF   47,F
074A:  BTFSC  03.2
074B:  BSF    41.0
074C:  DECF   04,F
074D:  MOVF   00,W
074E:  ADDWF  46,F
074F:  BTFSS  03.0
0750:  GOTO   754
0751:  INCF   47,F
0752:  BTFSC  03.2
0753:  BSF    41.0
0754:  DECF   04,F
0755:  MOVF   00,W
0756:  BTFSS  00.7
0757:  XORLW  80
0758:  ADDWF  47,F
0759:  BTFSC  03.0
075A:  BSF    41.0
075B:  BTFSC  43.4
075C:  GOTO   650
075D:  BTFSC  43.5
075E:  GOTO   692
075F:  GOTO   6C8
0760:  RETURN
0761:  MOVF   3A,W
0762:  MOVWF  41
0763:  MOVF   3E,W
0764:  XORWF  41,F
0765:  BTFSS  41.7
0766:  GOTO   76C
0767:  BCF    03.2
0768:  BCF    03.0
0769:  BTFSC  3A.7
076A:  BSF    03.0
076B:  GOTO   79F
076C:  MOVF   3A,W
076D:  MOVWF  41
076E:  MOVF   3D,W
076F:  MOVWF  42
0770:  MOVF   39,W
0771:  SUBWF  42,F
0772:  BTFSC  03.2
0773:  GOTO   77A
0774:  BTFSS  41.7
0775:  GOTO   79F
0776:  MOVF   03,W
0777:  XORLW  01
0778:  MOVWF  03
0779:  GOTO   79F
077A:  MOVF   3E,W
077B:  MOVWF  42
077C:  MOVF   3A,W
077D:  SUBWF  42,F
077E:  BTFSC  03.2
077F:  GOTO   786
0780:  BTFSS  41.7
0781:  GOTO   79F
0782:  MOVF   03,W
0783:  XORLW  01
0784:  MOVWF  03
0785:  GOTO   79F
0786:  MOVF   3F,W
0787:  MOVWF  42
0788:  MOVF   3B,W
0789:  SUBWF  42,F
078A:  BTFSC  03.2
078B:  GOTO   792
078C:  BTFSS  41.7
078D:  GOTO   79F
078E:  MOVF   03,W
078F:  XORLW  01
0790:  MOVWF  03
0791:  GOTO   79F
0792:  MOVF   40,W
0793:  MOVWF  42
0794:  MOVF   3C,W
0795:  SUBWF  42,F
0796:  BTFSC  03.2
0797:  GOTO   79E
0798:  BTFSS  41.7
0799:  GOTO   79F
079A:  MOVF   03,W
079B:  XORLW  01
079C:  MOVWF  03
079D:  GOTO   79F
079E:  BCF    03.0
079F:  RETURN
....................  
.................... #list 
....................  
.................... #fuses HS,NOWDT,NOPROTECT,NOLVP                        
.................... #use delay(clock = 8MHz)                     
*
002B:  MOVLW  47
002C:  MOVWF  04
002D:  BCF    03.7
002E:  MOVF   00,W
002F:  BTFSC  03.2
0030:  GOTO   03E
0031:  MOVLW  02
0032:  MOVWF  78
0033:  CLRF   77
0034:  DECFSZ 77,F
0035:  GOTO   034
0036:  DECFSZ 78,F
0037:  GOTO   033
0038:  MOVLW  97
0039:  MOVWF  77
003A:  DECFSZ 77,F
003B:  GOTO   03A
003C:  DECFSZ 00,F
003D:  GOTO   031
003E:  RETURN
*
0360:  MOVLW  08
0361:  SUBWF  3C,F
0362:  BTFSS  03.0
0363:  GOTO   370
0364:  MOVLW  3C
0365:  MOVWF  04
0366:  BCF    03.7
0367:  BCF    03.0
0368:  RRF    00,F
0369:  MOVF   00,W
036A:  BTFSC  03.2
036B:  GOTO   370
036C:  GOTO   36E
036D:  NOP
036E:  DECFSZ 00,F
036F:  GOTO   36D
0370:  RETURN
.................... #include <lcd.c>                                
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
00A4:  BSF    08.3
....................    output_float(LCD_DATA5); 
00A5:  BSF    08.4
....................    output_float(LCD_DATA6); 
00A6:  BSF    08.5
....................    output_float(LCD_DATA7); 
00A7:  BSF    08.6
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00A8:  BCF    03.5
00A9:  BSF    08.1
00AA:  BSF    03.5
00AB:  BCF    08.1
....................    delay_cycles(1); 
00AC:  NOP
....................    lcd_output_enable(1); 
00AD:  BCF    03.5
00AE:  BSF    08.2
00AF:  BSF    03.5
00B0:  BCF    08.2
....................    delay_cycles(1); 
00B1:  NOP
....................    high = lcd_read_nibble(); 
00B2:  BCF    03.5
00B3:  CALL   06B
00B4:  MOVF   78,W
00B5:  MOVWF  4E
....................        
....................    lcd_output_enable(0); 
00B6:  BCF    08.2
00B7:  BSF    03.5
00B8:  BCF    08.2
....................    delay_cycles(1); 
00B9:  NOP
....................    lcd_output_enable(1); 
00BA:  BCF    03.5
00BB:  BSF    08.2
00BC:  BSF    03.5
00BD:  BCF    08.2
....................    delay_us(1); 
00BE:  GOTO   0BF
....................    low = lcd_read_nibble(); 
00BF:  BCF    03.5
00C0:  CALL   06B
00C1:  MOVF   78,W
00C2:  MOVWF  4D
....................        
....................    lcd_output_enable(0); 
00C3:  BCF    08.2
00C4:  BSF    03.5
00C5:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00C6:  BCF    08.3
....................    output_drive(LCD_DATA5); 
00C7:  BCF    08.4
....................    output_drive(LCD_DATA6); 
00C8:  BCF    08.5
....................    output_drive(LCD_DATA7); 
00C9:  BCF    08.6
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00CA:  BCF    03.5
00CB:  SWAPF  4E,W
00CC:  MOVWF  77
00CD:  MOVLW  F0
00CE:  ANDWF  77,F
00CF:  MOVF   77,W
00D0:  IORWF  4D,W
00D1:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
006B:  CLRF   4F
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
006C:  BSF    03.5
006D:  BSF    08.3
006E:  MOVLW  00
006F:  BCF    03.5
0070:  BTFSC  08.3
0071:  MOVLW  01
0072:  IORWF  4F,F
....................    n |= input(LCD_DATA5) << 1; 
0073:  BSF    03.5
0074:  BSF    08.4
0075:  MOVLW  00
0076:  BCF    03.5
0077:  BTFSC  08.4
0078:  MOVLW  01
0079:  MOVWF  77
007A:  BCF    03.0
007B:  RLF    77,F
007C:  MOVF   77,W
007D:  IORWF  4F,F
....................    n |= input(LCD_DATA6) << 2; 
007E:  BSF    03.5
007F:  BSF    08.5
0080:  MOVLW  00
0081:  BCF    03.5
0082:  BTFSC  08.5
0083:  MOVLW  01
0084:  MOVWF  77
0085:  RLF    77,F
0086:  RLF    77,F
0087:  MOVLW  FC
0088:  ANDWF  77,F
0089:  MOVF   77,W
008A:  IORWF  4F,F
....................    n |= input(LCD_DATA7) << 3; 
008B:  BSF    03.5
008C:  BSF    08.6
008D:  MOVLW  00
008E:  BCF    03.5
008F:  BTFSC  08.6
0090:  MOVLW  01
0091:  MOVWF  77
0092:  RLF    77,F
0093:  RLF    77,F
0094:  RLF    77,F
0095:  MOVLW  F8
0096:  ANDWF  77,F
0097:  MOVF   77,W
0098:  IORWF  4F,F
....................     
....................    return(n); 
0099:  MOVF   4F,W
009A:  MOVWF  78
....................   #else 
009B:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
003F:  BTFSC  4E.0
0040:  GOTO   043
0041:  BCF    08.3
0042:  GOTO   044
0043:  BSF    08.3
0044:  BSF    03.5
0045:  BCF    08.3
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
0046:  BCF    03.5
0047:  BTFSC  4E.1
0048:  GOTO   04B
0049:  BCF    08.4
004A:  GOTO   04C
004B:  BSF    08.4
004C:  BSF    03.5
004D:  BCF    08.4
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
004E:  BCF    03.5
004F:  BTFSC  4E.2
0050:  GOTO   053
0051:  BCF    08.5
0052:  GOTO   054
0053:  BSF    08.5
0054:  BSF    03.5
0055:  BCF    08.5
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0056:  BCF    03.5
0057:  BTFSC  4E.3
0058:  GOTO   05B
0059:  BCF    08.6
005A:  GOTO   05C
005B:  BSF    08.6
005C:  BSF    03.5
005D:  BCF    08.6
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
005E:  NOP
....................    lcd_output_enable(1); 
005F:  BCF    03.5
0060:  BSF    08.2
0061:  BSF    03.5
0062:  BCF    08.2
....................    delay_us(2); 
0063:  GOTO   064
0064:  GOTO   065
....................    lcd_output_enable(0); 
0065:  BCF    03.5
0066:  BCF    08.2
0067:  BSF    03.5
0068:  BCF    08.2
0069:  BCF    03.5
006A:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
009C:  BSF    03.5
009D:  BCF    08.2
....................    lcd_rs_tris(); 
009E:  BCF    08.0
....................    lcd_rw_tris(); 
009F:  BCF    08.1
....................   #endif 
....................  
....................    lcd_output_rs(0); 
00A0:  BCF    03.5
00A1:  BCF    08.0
00A2:  BSF    03.5
00A3:  BCF    08.0
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00D2:  MOVF   78,W
00D3:  MOVWF  4D
00D4:  BTFSS  4D.7
00D5:  GOTO   0D8
00D6:  BSF    03.5
00D7:  GOTO   0A4
....................    lcd_output_rs(address); 
00D8:  MOVF   4B,F
00D9:  BTFSS  03.2
00DA:  GOTO   0DD
00DB:  BCF    08.0
00DC:  GOTO   0DE
00DD:  BSF    08.0
00DE:  BSF    03.5
00DF:  BCF    08.0
....................    delay_cycles(1); 
00E0:  NOP
....................    lcd_output_rw(0); 
00E1:  BCF    03.5
00E2:  BCF    08.1
00E3:  BSF    03.5
00E4:  BCF    08.1
....................    delay_cycles(1); 
00E5:  NOP
....................    lcd_output_enable(0); 
00E6:  BCF    03.5
00E7:  BCF    08.2
00E8:  BSF    03.5
00E9:  BCF    08.2
....................    lcd_send_nibble(n >> 4); 
00EA:  BCF    03.5
00EB:  SWAPF  4C,W
00EC:  MOVWF  4D
00ED:  MOVLW  0F
00EE:  ANDWF  4D,F
00EF:  MOVF   4D,W
00F0:  MOVWF  4E
00F1:  CALL   03F
....................    lcd_send_nibble(n & 0xf); 
00F2:  MOVF   4C,W
00F3:  ANDLW  0F
00F4:  MOVWF  4D
00F5:  MOVWF  4E
00F6:  CALL   03F
00F7:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00F8:  BSF    03.5
00F9:  BCF    08.3
....................    output_drive(LCD_DATA5); 
00FA:  BCF    08.4
....................    output_drive(LCD_DATA6); 
00FB:  BCF    08.5
....................    output_drive(LCD_DATA7); 
00FC:  BCF    08.6
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
00FD:  BCF    08.2
....................    lcd_rs_tris(); 
00FE:  BCF    08.0
....................    lcd_rw_tris(); 
00FF:  BCF    08.1
....................  #endif 
....................  
....................    lcd_output_rs(0); 
0100:  BCF    03.5
0101:  BCF    08.0
0102:  BSF    03.5
0103:  BCF    08.0
....................    lcd_output_rw(0); 
0104:  BCF    03.5
0105:  BCF    08.1
0106:  BSF    03.5
0107:  BCF    08.1
....................    lcd_output_enable(0); 
0108:  BCF    03.5
0109:  BCF    08.2
010A:  BSF    03.5
010B:  BCF    08.2
....................      
....................    delay_ms(15); 
010C:  MOVLW  0F
010D:  BCF    03.5
010E:  MOVWF  47
010F:  CALL   02B
....................    for(i=1;i<=3;++i) 
0110:  MOVLW  01
0111:  MOVWF  39
0112:  MOVF   39,W
0113:  SUBLW  03
0114:  BTFSS  03.0
0115:  GOTO   11E
....................    { 
....................        lcd_send_nibble(3); 
0116:  MOVLW  03
0117:  MOVWF  4E
0118:  CALL   03F
....................        delay_ms(5); 
0119:  MOVLW  05
011A:  MOVWF  47
011B:  CALL   02B
011C:  INCF   39,F
011D:  GOTO   112
....................    } 
....................     
....................    lcd_send_nibble(2); 
011E:  MOVLW  02
011F:  MOVWF  4E
0120:  CALL   03F
....................    delay_ms(5); 
0121:  MOVLW  05
0122:  MOVWF  47
0123:  CALL   02B
....................    for(i=0;i<=3;++i) 
0124:  CLRF   39
0125:  MOVF   39,W
0126:  SUBLW  03
0127:  BTFSS  03.0
0128:  GOTO   132
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0129:  MOVF   39,W
012A:  CALL   004
012B:  MOVWF  3A
012C:  CLRF   4B
012D:  MOVF   3A,W
012E:  MOVWF  4C
012F:  CALL   09C
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0130:  INCF   39,F
0131:  GOTO   125
0132:  BSF    0A.3
0133:  BCF    0A.4
0134:  GOTO   00E (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
0135:  DECFSZ 48,W
0136:  GOTO   138
0137:  GOTO   13B
....................       address=LCD_LINE_TWO; 
0138:  MOVLW  40
0139:  MOVWF  49
013A:  GOTO   13C
....................    else 
....................       address=0; 
013B:  CLRF   49
....................       
....................    address+=x-1; 
013C:  MOVLW  01
013D:  SUBWF  47,W
013E:  ADDWF  49,F
....................    lcd_send_byte(0,0x80|address); 
013F:  MOVF   49,W
0140:  IORLW  80
0141:  MOVWF  4A
0142:  CLRF   4B
0143:  MOVF   4A,W
0144:  MOVWF  4C
0145:  CALL   09C
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0146:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0147:  MOVF   46,W
0148:  XORLW  07
0149:  BTFSC  03.2
014A:  GOTO   155
014B:  XORLW  0B
014C:  BTFSC  03.2
014D:  GOTO   15A
014E:  XORLW  06
014F:  BTFSC  03.2
0150:  GOTO   162
0151:  XORLW  02
0152:  BTFSC  03.2
0153:  GOTO   168
0154:  GOTO   16D
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0155:  MOVLW  01
0156:  MOVWF  47
0157:  MOVWF  48
0158:  CALL   135
0159:  GOTO   172
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
015A:  CLRF   4B
015B:  MOVLW  01
015C:  MOVWF  4C
015D:  CALL   09C
....................                      delay_ms(2); 
015E:  MOVLW  02
015F:  MOVWF  47
0160:  CALL   02B
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0161:  GOTO   172
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0162:  MOVLW  01
0163:  MOVWF  47
0164:  MOVLW  02
0165:  MOVWF  48
0166:  CALL   135
0167:  GOTO   172
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0168:  CLRF   4B
0169:  MOVLW  10
016A:  MOVWF  4C
016B:  CALL   09C
016C:  GOTO   172
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
016D:  MOVLW  01
016E:  MOVWF  4B
016F:  MOVF   46,W
0170:  MOVWF  4C
0171:  CALL   09C
....................      #endif 
....................    } 
0172:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................                                      
.................... //#FUSES FRC                                 
....................                                                                                                                                  
.................... //#use delay(restart_wdt)                                                                   
....................                                         
....................                                    
....................                                  
.................... //#include <lcd.c>                                                         
....................                                
....................                            
.................... #define DS18B20_PIN PIN_B1                         // DS18B20 Data pin is connected to pin RB1 
.................... #define DS18B20_PIN PIN_B1                         // DS18B20 Data pin is connected to pin RB1 
.................... #define DS18B20_PIN1 PIN_B2                         // DS18B20 Data pin is connected to pin RB1 
....................  
.................... #define Down                        PIN_B4                      // Temperature down button 
.................... #define Up                          PIN_B3                     // Temperature up button                                      
.................... #define PWR                         PIN_B5                    // PWR pin to turn on a water pump                                 
.................... #define LCD_BACKLIGHT_ON            PIN_D7                   // Pin to turn on LCD backlight    
....................                                                                          
....................   
....................                                                   
.................... // DS18B20 sensor functions for full run                                                        
.................... int1 ds18b20_start(){                              
....................   output_low(DS18B20_PIN);                         // Send reset pulse to the DS18B20 sensor 
*
0371:  BSF    03.5
0372:  BCF    06.1
0373:  BCF    03.5
0374:  BCF    06.1
....................   output_drive(DS18B20_PIN);                       // Configure DS18B20_PIN pin as output 
0375:  BSF    03.5
0376:  BCF    06.1
....................   delay_us(500);                                   // Wait 500 us  
0377:  MOVLW  02
0378:  BCF    03.5
0379:  MOVWF  3B
037A:  MOVLW  F8
037B:  MOVWF  3C
037C:  CALL   360
037D:  DECFSZ 3B,F
037E:  GOTO   37A
....................   output_float(DS18B20_PIN);                       // Configure DS18B20_PIN pin as input 
037F:  BSF    03.5
0380:  BSF    06.1
....................   delay_us(100);                                   //wait to read the DS18B20 sensor response 
0381:  MOVLW  42
0382:  MOVWF  77
0383:  DECFSZ 77,F
0384:  GOTO   383
0385:  NOP
....................   if (!input(DS18B20_PIN)) {                                                                  
0386:  BSF    06.1
0387:  BCF    03.5
0388:  BTFSC  06.1
0389:  GOTO   394
....................     delay_us(400);                                 // Wait 400 us   
038A:  MOVLW  02
038B:  MOVWF  3B
038C:  MOVLW  C6
038D:  MOVWF  3C
038E:  CALL   360
038F:  DECFSZ 3B,F
0390:  GOTO   38C
....................     return TRUE;                                   // DS18B20 sensor is present 
0391:  MOVLW  01
0392:  MOVWF  78
0393:  GOTO   396
....................   }                               
....................   return FALSE;  
0394:  MOVLW  00
0395:  MOVWF  78
0396:  RETURN
.................... }                                       
....................                                                        
....................                                                                                                                 
.................... void ds18b20_write_bit(int1 value){                  
....................   output_low(DS18B20_PIN);                                                                                                                        
*
03AC:  BSF    03.5
03AD:  BCF    06.1
03AE:  BCF    03.5
03AF:  BCF    06.1
....................   output_drive(DS18B20_PIN);                       // Configure DS18B20_PIN pin as output 
03B0:  BSF    03.5
03B1:  BCF    06.1
....................   delay_us(2);                                     // Wait 2 us 
03B2:  GOTO   3B3
03B3:  GOTO   3B4
....................   output_bit(DS18B20_PIN, value);                         
03B4:  BCF    03.5
03B5:  MOVF   3E,F
03B6:  BTFSS  03.2
03B7:  GOTO   3BA
03B8:  BCF    06.1
03B9:  GOTO   3BB
03BA:  BSF    06.1
03BB:  BSF    03.5
03BC:  BCF    06.1
....................   delay_us(80);                                    // Wait 80 us 
03BD:  MOVLW  34
03BE:  MOVWF  77
03BF:  DECFSZ 77,F
03C0:  GOTO   3BF
03C1:  GOTO   3C2
03C2:  NOP
....................   output_float(DS18B20_PIN);                       // Configure DS18B20_PIN pin as input 
03C3:  BSF    06.1
....................   delay_us(2);                                     // Wait 2 us                                                                      
03C4:  GOTO   3C5
03C5:  GOTO   3C6
.................... }                      
....................                                                  
....................   
.................... void ds18b20_write_byte(int8 value){                
....................   int8 i;                 
....................   for(i = 0; i < 8; i++) 
*
0397:  CLRF   3C
0398:  MOVF   3C,W
0399:  SUBLW  07
039A:  BTFSS  03.0
039B:  GOTO   3C9
....................     ds18b20_write_bit(bit_test(value, i)); 
039C:  MOVF   3B,W
039D:  MOVWF  77
039E:  MOVF   3C,W
039F:  MOVWF  78
03A0:  BTFSC  03.2
03A1:  GOTO   3A6
03A2:  BCF    03.0
03A3:  RRF    77,F
03A4:  DECFSZ 78,F
03A5:  GOTO   3A2
03A6:  MOVLW  00
03A7:  BTFSC  77.0
03A8:  MOVLW  01
03A9:  MOVWF  3D
03AA:  MOVF   3D,W
03AB:  MOVWF  3E
*
03C6:  BCF    03.5
03C7:  INCF   3C,F
03C8:  GOTO   398
03C9:  RETURN
.................... } 
....................   
....................                                                           
.................... int1 ds18b20_read_bit(void) {                           
....................   int1 value;        
....................   output_low(DS18B20_PIN); 
*
03D0:  BSF    03.5
03D1:  BCF    06.1
03D2:  BCF    03.5
03D3:  BCF    06.1
....................   output_drive(DS18B20_PIN);                       // Configure DS18B20_PIN pin as output 
03D4:  BSF    03.5
03D5:  BCF    06.1
....................   delay_us(2);                          
03D6:  GOTO   3D7
03D7:  GOTO   3D8
....................   output_float(DS18B20_PIN);                       // Configure DS18B20_PIN pin as input 
03D8:  BSF    06.1
....................   delay_us(5);                                     // Wait 5 us 
03D9:  MOVLW  02
03DA:  MOVWF  77
03DB:  DECFSZ 77,F
03DC:  GOTO   3DB
03DD:  GOTO   3DE
03DE:  NOP
....................   value = input(DS18B20_PIN); 
03DF:  BSF    06.1
03E0:  BCF    03.5
03E1:  BCF    41.0
03E2:  BTFSC  06.1
03E3:  BSF    41.0
....................   delay_us(100);                                   // Wait 100 us 
03E4:  MOVLW  42
03E5:  MOVWF  77
03E6:  DECFSZ 77,F
03E7:  GOTO   3E6
03E8:  NOP
....................   return value;            
03E9:  MOVLW  00
03EA:  BTFSC  41.0
03EB:  MOVLW  01
03EC:  MOVWF  78
.................... } 
....................                            
....................                          
.................... int8 ds18b20_read_byte(void) { 
*
03CA:  CLRF   40
....................   int8 i, value = 0; 
....................   for(i = 0; i  < 8; i++) 
03CB:  CLRF   3F
03CC:  MOVF   3F,W
03CD:  SUBLW  07
03CE:  BTFSS  03.0
03CF:  GOTO   3F6
....................     shift_right(&value, 1, ds18b20_read_bit()); 
*
03ED:  MOVF   78,F
03EE:  BTFSS  03.2
03EF:  GOTO   3F2
03F0:  BCF    03.0
03F1:  GOTO   3F3
03F2:  BSF    03.0
03F3:  RRF    40,F
03F4:  INCF   3F,F
03F5:  GOTO   3CC
....................   return value;                                                     
03F6:  MOVF   40,W
03F7:  MOVWF  78
03F8:  RETURN
.................... }                    
....................    
....................   
.................... int1 ds18b20_read(int16 *raw_temp_value) { 
....................   if (!ds18b20_start())                              // Send start pulse 
03F9:  CALL   371
03FA:  MOVF   78,F
03FB:  BTFSS  03.2
03FC:  GOTO   400
....................     return FALSE; 
03FD:  MOVLW  00
03FE:  MOVWF  78
03FF:  GOTO   44E
....................   ds18b20_write_byte(0xCC);                          // Send skip ROM command 
0400:  MOVLW  CC
0401:  MOVWF  3B
0402:  CALL   397
....................   ds18b20_write_byte(0x44);                          // Send start conversion command 
0403:  MOVLW  44
0404:  MOVWF  3B
0405:  CALL   397
....................   while(ds18b20_read_byte() == 0);                   // Wait for conversion complete 
0406:  CALL   3CA
0407:  MOVF   78,F
0408:  BTFSC  03.2
0409:  GOTO   406
....................   if (!ds18b20_start())                              // Send start pulse 
040A:  CALL   371
040B:  MOVF   78,F
040C:  BTFSS  03.2
040D:  GOTO   411
....................     return FALSE;                                    // Return 0 if error 
040E:  MOVLW  00
040F:  MOVWF  78
0410:  GOTO   44E
....................   ds18b20_write_byte(0xCC);                          // Send skip ROM command 
0411:  MOVLW  CC
0412:  MOVWF  3B
0413:  CALL   397
....................   ds18b20_write_byte(0xBE);                          // Send read command 
0414:  MOVLW  BE
0415:  MOVWF  3B
0416:  CALL   397
....................   *raw_temp_value = ds18b20_read_byte();             // Read temperature LSB byte and store it on raw_temp_value LSB byte 
0417:  MOVF   3A,W
0418:  MOVWF  7A
0419:  MOVF   39,W
041A:  MOVWF  3B
041B:  MOVF   3A,W
041C:  MOVWF  3C
041D:  CALL   3CA
041E:  MOVF   3B,W
041F:  MOVWF  04
0420:  BCF    03.7
0421:  BTFSC  3C.0
0422:  BSF    03.7
0423:  INCF   04,F
0424:  CLRF   00
0425:  DECF   04,F
0426:  MOVF   78,W
0427:  MOVWF  00
....................   *raw_temp_value |= (int16)(ds18b20_read_byte()) << 8;     // Read temperature MSB byte and store it on raw_temp_value MSB byte 
0428:  MOVF   3A,W
0429:  MOVWF  7A
042A:  MOVF   39,W
042B:  MOVWF  3B
042C:  MOVF   3A,W
042D:  MOVWF  3C
042E:  MOVF   39,W
042F:  MOVWF  04
0430:  BCF    03.7
0431:  BTFSC  3A.0
0432:  BSF    03.7
0433:  INCF   04,F
0434:  MOVF   00,W
0435:  MOVWF  3E
0436:  DECF   04,F
0437:  MOVF   00,W
0438:  MOVWF  3D
0439:  CALL   3CA
043A:  CLRF   40
043B:  MOVLW  00
043C:  IORWF  3D,W
043D:  MOVWF  77
043E:  MOVF   78,W
043F:  IORWF  3E,W
0440:  MOVWF  7A
0441:  MOVF   3B,W
0442:  MOVWF  04
0443:  BCF    03.7
0444:  BTFSC  3C.0
0445:  BSF    03.7
0446:  INCF   04,F
0447:  MOVF   7A,W
0448:  MOVWF  00
0449:  DECF   04,F
044A:  MOVF   77,W
044B:  MOVWF  00
....................   return TRUE;                                              // OK --> return 1 
044C:  MOVLW  01
044D:  MOVWF  78
044E:  RETURN
.................... }          
....................        
....................        
....................      int1 ds18b20_start1(){ 
....................   output_low(DS18B20_PIN1);                        // Send reset pulse to the DS18B20 sensor 
*
053E:  BSF    03.5
053F:  BCF    06.2
0540:  BCF    03.5
0541:  BCF    06.2
....................   output_drive(DS18B20_PIN1);                      // Configure DS18B20_PIN pin as output 
0542:  BSF    03.5
0543:  BCF    06.2
....................   delay_us(500);                                   // Wait 500 us 
0544:  MOVLW  02
0545:  BCF    03.5
0546:  MOVWF  3B
0547:  MOVLW  F8
0548:  MOVWF  3C
0549:  CALL   360
054A:  DECFSZ 3B,F
054B:  GOTO   547
....................   output_float(DS18B20_PIN1);                      // Configure DS18B20_PIN pin as input 
054C:  BSF    03.5
054D:  BSF    06.2
....................   delay_us(100);                                   //wait to read the DS18B20 sensor response 
054E:  MOVLW  42
054F:  MOVWF  77
0550:  DECFSZ 77,F
0551:  GOTO   550
0552:  NOP
....................   if (!input(DS18B20_PIN1)) {                                                                            
0553:  BSF    06.2
0554:  BCF    03.5
0555:  BTFSC  06.2
0556:  GOTO   561
....................     delay_us(400);                                 // Wait 400 us   
0557:  MOVLW  02
0558:  MOVWF  3B
0559:  MOVLW  C6
055A:  MOVWF  3C
055B:  CALL   360
055C:  DECFSZ 3B,F
055D:  GOTO   559
....................                        
....................     return TRUE;                                   // DS18B20 sensor is present 
055E:  MOVLW  01
055F:  MOVWF  78
0560:  GOTO   567
....................   }            
....................     output_high(DS18B20_PIN1);     
0561:  BSF    03.5
0562:  BCF    06.2
0563:  BCF    03.5
0564:  BSF    06.2
....................     return FALSE;  
0565:  MOVLW  00
0566:  MOVWF  78
0567:  RETURN
.................... }                                                      
....................         
....................       
.................... void ds18b20_write_bit1(int1 value1){ 
....................   output_low(DS18B20_PIN1); 
*
057D:  BSF    03.5
057E:  BCF    06.2
057F:  BCF    03.5
0580:  BCF    06.2
....................   output_drive(DS18B20_PIN1);                       // Configure DS18B20_PIN pin as output 
0581:  BSF    03.5
0582:  BCF    06.2
....................   delay_us(2);                                      // Wait 2 us 
0583:  GOTO   584
0584:  GOTO   585
....................   output_bit(DS18B20_PIN1, value1); 
0585:  BCF    03.5
0586:  MOVF   3E,F
0587:  BTFSS  03.2
0588:  GOTO   58B
0589:  BCF    06.2
058A:  GOTO   58C
058B:  BSF    06.2
058C:  BSF    03.5
058D:  BCF    06.2
....................   delay_us(80);                                     // Wait 80 us 
058E:  MOVLW  34
058F:  MOVWF  77
0590:  DECFSZ 77,F
0591:  GOTO   590
0592:  GOTO   593
0593:  NOP
....................   output_float(DS18B20_PIN1);                       // Configure DS18B20_PIN pin as input 
0594:  BSF    06.2
....................   delay_us(2);                                      // Wait 2 us 
0595:  GOTO   596
0596:  GOTO   597
.................... }                             
....................                   
....................  
.................... void ds18b20_write_byte1(int8 value1){ 
....................   int8 a; 
....................   for(a = 0; a < 8; a++)                                    
*
0568:  CLRF   3C
0569:  MOVF   3C,W
056A:  SUBLW  07
056B:  BTFSS  03.0
056C:  GOTO   59A
....................     ds18b20_write_bit1(bit_test(value1, a)); 
056D:  MOVF   3B,W
056E:  MOVWF  77
056F:  MOVF   3C,W
0570:  MOVWF  78
0571:  BTFSC  03.2
0572:  GOTO   577
0573:  BCF    03.0
0574:  RRF    77,F
0575:  DECFSZ 78,F
0576:  GOTO   573
0577:  MOVLW  00
0578:  BTFSC  77.0
0579:  MOVLW  01
057A:  MOVWF  3D
057B:  MOVF   3D,W
057C:  MOVWF  3E
*
0597:  BCF    03.5
0598:  INCF   3C,F
0599:  GOTO   569
059A:  RETURN
.................... } 
....................  
....................  
.................... int1 ds18b20_read_bit1(void) {                        
....................   int1 value1; 
....................   output_low(DS18B20_PIN1); 
*
05A1:  BSF    03.5
05A2:  BCF    06.2
05A3:  BCF    03.5
05A4:  BCF    06.2
....................   output_drive(DS18B20_PIN1);                       // Configure DS18B20_PIN pin as output 
05A5:  BSF    03.5
05A6:  BCF    06.2
....................   delay_us(2); 
05A7:  GOTO   5A8
05A8:  GOTO   5A9
....................   output_float(DS18B20_PIN1);                       // Configure DS18B20_PIN pin as input                  
05A9:  BSF    06.2
....................   delay_us(5);                                      // Wait 5 us 
05AA:  MOVLW  02
05AB:  MOVWF  77
05AC:  DECFSZ 77,F
05AD:  GOTO   5AC
05AE:  GOTO   5AF
05AF:  NOP
....................   value1 = input(DS18B20_PIN1); 
05B0:  BSF    06.2
05B1:  BCF    03.5
05B2:  BCF    41.0
05B3:  BTFSC  06.2
05B4:  BSF    41.0
....................   delay_us(100);                                    // Wait 100 us 
05B5:  MOVLW  42
05B6:  MOVWF  77
05B7:  DECFSZ 77,F
05B8:  GOTO   5B7
05B9:  NOP
....................   return value1;       
05BA:  MOVLW  00
05BB:  BTFSC  41.0
05BC:  MOVLW  01
05BD:  MOVWF  78
.................... }                            
....................                           
....................                     
.................... int8 ds18b20_read_byte1(void) {        
*
059B:  CLRF   40
....................   int8 a, value1 = 0;                              
....................   for(a = 0; a  < 8; a++) 
059C:  CLRF   3F
059D:  MOVF   3F,W
059E:  SUBLW  07
059F:  BTFSS  03.0
05A0:  GOTO   5C7
....................     shift_right(&value1, 1, ds18b20_read_bit1()); 
*
05BE:  MOVF   78,F
05BF:  BTFSS  03.2
05C0:  GOTO   5C3
05C1:  BCF    03.0
05C2:  GOTO   5C4
05C3:  BSF    03.0
05C4:  RRF    40,F
05C5:  INCF   3F,F
05C6:  GOTO   59D
....................   return value1; 
05C7:  MOVF   40,W
05C8:  MOVWF  78
05C9:  RETURN
.................... } 
....................  
....................  
.................... int1 ds18b20_read1(int16 *raw_temp_value1) { 
....................   if (!ds18b20_start1())                                   // Send start pulse          
05CA:  CALL   53E
05CB:  MOVF   78,F
05CC:  BTFSS  03.2
05CD:  GOTO   5D1
....................   return FALSE;  
05CE:  MOVLW  00
05CF:  MOVWF  78
05D0:  GOTO   61F
....................   ds18b20_write_byte1(0xCC);                               // Send skip ROM command 
05D1:  MOVLW  CC
05D2:  MOVWF  3B
05D3:  CALL   568
....................   ds18b20_write_byte1(0x44);                               // Send start conversion command 
05D4:  MOVLW  44
05D5:  MOVWF  3B
05D6:  CALL   568
....................   while(ds18b20_read_byte1() == 0);                        // Wait for conversion complete 
05D7:  CALL   59B
05D8:  MOVF   78,F
05D9:  BTFSC  03.2
05DA:  GOTO   5D7
....................   if (!ds18b20_start1()) {                                  // Send start pulse      
05DB:  CALL   53E
05DC:  MOVF   78,F
05DD:  BTFSS  03.2
05DE:  GOTO   5E2
....................        return FALSE;                                          // Return 0 if error 
05DF:  MOVLW  00
05E0:  MOVWF  78
05E1:  GOTO   61F
....................   }                                      
....................   ds18b20_write_byte1(0xCC);                               // Send skip ROM command 
05E2:  MOVLW  CC
05E3:  MOVWF  3B
05E4:  CALL   568
....................   ds18b20_write_byte1(0xBE);                               // Send read command 
05E5:  MOVLW  BE
05E6:  MOVWF  3B
05E7:  CALL   568
....................   *raw_temp_value1 = ds18b20_read_byte1();                 // Read temperature LSB byte and store it on raw_temp_value LSB byte 
05E8:  MOVF   3A,W
05E9:  MOVWF  7A
05EA:  MOVF   39,W
05EB:  MOVWF  3B
05EC:  MOVF   3A,W
05ED:  MOVWF  3C
05EE:  CALL   59B
05EF:  MOVF   3B,W
05F0:  MOVWF  04
05F1:  BCF    03.7
05F2:  BTFSC  3C.0
05F3:  BSF    03.7
05F4:  INCF   04,F
05F5:  CLRF   00
05F6:  DECF   04,F
05F7:  MOVF   78,W
05F8:  MOVWF  00
....................   *raw_temp_value1 |= (int16)(ds18b20_read_byte1()) << 8;     // Read temperature MSB byte and store it on raw_temp_value MSB byte 
05F9:  MOVF   3A,W
05FA:  MOVWF  7A
05FB:  MOVF   39,W
05FC:  MOVWF  3B
05FD:  MOVF   3A,W
05FE:  MOVWF  3C
05FF:  MOVF   39,W
0600:  MOVWF  04
0601:  BCF    03.7
0602:  BTFSC  3A.0
0603:  BSF    03.7
0604:  INCF   04,F
0605:  MOVF   00,W
0606:  MOVWF  3E
0607:  DECF   04,F
0608:  MOVF   00,W
0609:  MOVWF  3D
060A:  CALL   59B
060B:  CLRF   40
060C:  MOVLW  00
060D:  IORWF  3D,W
060E:  MOVWF  77
060F:  MOVF   78,W
0610:  IORWF  3E,W
0611:  MOVWF  7A
0612:  MOVF   3B,W
0613:  MOVWF  04
0614:  BCF    03.7
0615:  BTFSC  3C.0
0616:  BSF    03.7
0617:  INCF   04,F
0618:  MOVF   7A,W
0619:  MOVWF  00
061A:  DECF   04,F
061B:  MOVF   77,W
061C:  MOVWF  00
....................   return TRUE;                                                // OK --> return 1 
061D:  MOVLW  01
061E:  MOVWF  78
061F:  RETURN
.................... }                                
....................                                    
....................                                                       
.................... void main() { 
*
0800:  MOVF   03,W
0801:  ANDLW  1F
0802:  MOVWF  03
0803:  BSF    03.5
0804:  BSF    1F.0
0805:  BSF    1F.1
0806:  BSF    1F.2
0807:  BCF    1F.3
0808:  MOVLW  07
0809:  MOVWF  1C
080A:  BCF    03.7
....................   
.................... // Initialize LCD module 
....................  lcd_init();  
080B:  BCF    0A.3
080C:  BCF    03.5
080D:  GOTO   0F8
080E:  BSF    0A.3
....................                                              
.................... // Keep the pump off, until the user doesn't set the temperature!!!     
....................                   
.................... output_low(PIN_B5); 
080F:  BSF    03.5
0810:  BCF    06.5
0811:  BCF    03.5
0812:  BCF    06.5
....................                             
....................              
....................                                                                                                                                                                                   
.................... signed int16 raw_temp; 
.................... signed int16 raw_temp1; 
....................                                                                               
.................... float ButtonCounter = 10;                    // Starting point temperature set                     
....................                                             
.................... float temp;                      
.................... float temp1;                       
0813:  CLRF   28
0814:  CLRF   27
0815:  MOVLW  20
0816:  MOVWF  26
0817:  MOVLW  82
0818:  MOVWF  25
....................                     
....................                                                                    
....................     // lcd_putc("\f");                            // Print 'C ' 
....................      lcd_gotoxy(10, 1);                // Print 'C ' 
0819:  MOVLW  0A
081A:  MOVWF  47
081B:  MOVLW  01
081C:  MOVWF  48
081D:  BCF    0A.3
081E:  CALL   135
081F:  BSF    0A.3
....................      lcd_putc("Set:  ");                       // Print 'C '  
0820:  MOVLW  0C
0821:  BSF    03.6
0822:  MOVWF  0D
0823:  MOVLW  00
0824:  MOVWF  0F
0825:  BCF    0A.3
0826:  BCF    03.6
0827:  CALL   173
0828:  BSF    0A.3
....................      lcd_gotoxy(14, 1);                // Print 'C ' 
0829:  MOVLW  0E
082A:  MOVWF  47
082B:  MOVLW  01
082C:  MOVWF  48
082D:  BCF    0A.3
082E:  CALL   135
082F:  BSF    0A.3
....................      printf(lcd_putc, "%2.0f",ButtonCounter);     
0830:  MOVLW  01
0831:  MOVWF  04
0832:  MOVF   28,W
0833:  MOVWF  3C
0834:  MOVF   27,W
0835:  MOVWF  3B
0836:  MOVF   26,W
0837:  MOVWF  3A
0838:  MOVF   25,W
0839:  MOVWF  39
083A:  CLRF   3D
083B:  BCF    0A.3
083C:  CALL   20D
083D:  BSF    0A.3
....................                                                
....................       lcd_gotoxy(10, 2);        
083E:  MOVLW  0A
083F:  MOVWF  47
0840:  MOVLW  02
0841:  MOVWF  48
0842:  BCF    0A.3
0843:  CALL   135
0844:  BSF    0A.3
....................       lcd_putc("Pwr:  ");                            // Print 'C ' 
0845:  MOVLW  10
0846:  BSF    03.6
0847:  MOVWF  0D
0848:  MOVLW  00
0849:  MOVWF  0F
084A:  BCF    0A.3
084B:  BCF    03.6
084C:  CALL   173
084D:  BSF    0A.3
....................                                  
....................       lcd_gotoxy(1, 1);                          // Go to column 5 row 2 
084E:  MOVLW  01
084F:  MOVWF  47
0850:  MOVWF  48
0851:  BCF    0A.3
0852:  CALL   135
0853:  BSF    0A.3
....................       printf(lcd_putc, "V: ");                                   
0854:  MOVLW  56
0855:  MOVWF  46
0856:  BCF    0A.3
0857:  CALL   147
0858:  BSF    0A.3
0859:  MOVLW  3A
085A:  MOVWF  46
085B:  BCF    0A.3
085C:  CALL   147
085D:  BSF    0A.3
085E:  MOVLW  20
085F:  MOVWF  46
0860:  BCF    0A.3
0861:  CALL   147
0862:  BSF    0A.3
....................                                                                       
....................       lcd_gotoxy(1, 2);   
0863:  MOVLW  01
0864:  MOVWF  47
0865:  MOVLW  02
0866:  MOVWF  48
0867:  BCF    0A.3
0868:  CALL   135
0869:  BSF    0A.3
....................       printf(lcd_putc, "A: ");// Go to column 5 row 2 
086A:  MOVLW  41
086B:  MOVWF  46
086C:  BCF    0A.3
086D:  CALL   147
086E:  BSF    0A.3
086F:  MOVLW  3A
0870:  MOVWF  46
0871:  BCF    0A.3
0872:  CALL   147
0873:  BSF    0A.3
0874:  MOVLW  20
0875:  MOVWF  46
0876:  BCF    0A.3
0877:  CALL   147
0878:  BSF    0A.3
....................                    
....................     // Show the data, until the MCU loads.               
....................                    
....................       if(ds18b20_read(&raw_temp)) {  
0879:  CLRF   3A
087A:  MOVLW  21
087B:  MOVWF  39
087C:  BCF    0A.3
087D:  CALL   3F9
087E:  BSF    0A.3
087F:  MOVF   78,F
0880:  BTFSC  03.2
0881:  GOTO   0CC
....................       temp = (float)raw_temp / 16;               // Convert temperature raw value into degree Celsius (temp in °C = raw/16) 
0882:  MOVF   22,W
0883:  MOVWF  3A
0884:  MOVF   21,W
0885:  MOVWF  39
0886:  BCF    0A.3
0887:  CALL   44F
0888:  BSF    0A.3
0889:  MOVF   7A,W
088A:  MOVWF  3C
088B:  MOVF   79,W
088C:  MOVWF  3B
088D:  MOVF   78,W
088E:  MOVWF  3A
088F:  MOVF   77,W
0890:  MOVWF  39
0891:  MOVF   3C,W
0892:  MOVWF  40
0893:  MOVF   3B,W
0894:  MOVWF  3F
0895:  MOVF   3A,W
0896:  MOVWF  3E
0897:  MOVF   39,W
0898:  MOVWF  3D
0899:  CLRF   44
089A:  CLRF   43
089B:  CLRF   42
089C:  MOVLW  83
089D:  MOVWF  41
089E:  BCF    0A.3
089F:  CALL   474
08A0:  BSF    0A.3
08A1:  MOVF   7A,W
08A2:  MOVWF  2C
08A3:  MOVF   79,W
08A4:  MOVWF  2B
08A5:  MOVF   78,W
08A6:  MOVWF  2A
08A7:  MOVF   77,W
08A8:  MOVWF  29
....................    //   lcd_gotoxy(1, 1);                          // Go to column 5 row 2 
....................    //   printf(lcd_putc, "V: "); 
....................       lcd_gotoxy(2, 1);       
08A9:  MOVLW  02
08AA:  MOVWF  47
08AB:  MOVLW  01
08AC:  MOVWF  48
08AD:  BCF    0A.3
08AE:  CALL   135
08AF:  BSF    0A.3
....................       printf(lcd_putc, "%3.0f", temp);                                                                                                           
08B0:  MOVLW  02
08B1:  MOVWF  04
08B2:  MOVF   2C,W
08B3:  MOVWF  3C
08B4:  MOVF   2B,W
08B5:  MOVWF  3B
08B6:  MOVF   2A,W
08B7:  MOVWF  3A
08B8:  MOVF   29,W
08B9:  MOVWF  39
08BA:  CLRF   3D
08BB:  BCF    0A.3
08BC:  CALL   20D
08BD:  BSF    0A.3
....................       lcd_putc(223);                             // Print degree symbol ( ° ) 
08BE:  MOVLW  DF
08BF:  MOVWF  46
08C0:  BCF    0A.3
08C1:  CALL   147
08C2:  BSF    0A.3
....................       lcd_putc("C; ");                            // Print 'C ' 
08C3:  MOVLW  14
08C4:  BSF    03.6
08C5:  MOVWF  0D
08C6:  MOVLW  00
08C7:  MOVWF  0F
08C8:  BCF    0A.3
08C9:  BCF    03.6
08CA:  CALL   173
08CB:  BSF    0A.3
....................       //lcd_gotoxy(10, 1);     
....................       //lcd_putc("Set:  ");                            // Print 'C '          
....................     }     
....................                                                      
....................                                                                               
....................      if(ds18b20_read1(&raw_temp1)) {                                     
08CC:  CLRF   3A
08CD:  MOVLW  23
08CE:  MOVWF  39
08CF:  BCF    0A.3
08D0:  CALL   5CA
08D1:  BSF    0A.3
08D2:  MOVF   78,F
08D3:  BTFSC  03.2
08D4:  GOTO   11E
....................       temp1 = (float)raw_temp1 / 16;               // Convert temperature raw value into degree Celsius (temp in °C = raw/16) 
08D5:  MOVF   24,W
08D6:  MOVWF  3A
08D7:  MOVF   23,W
08D8:  MOVWF  39
08D9:  BCF    0A.3
08DA:  CALL   44F
08DB:  BSF    0A.3
08DC:  MOVF   7A,W
08DD:  MOVWF  3C
08DE:  MOVF   79,W
08DF:  MOVWF  3B
08E0:  MOVF   78,W
08E1:  MOVWF  3A
08E2:  MOVF   77,W
08E3:  MOVWF  39
08E4:  MOVF   3C,W
08E5:  MOVWF  40
08E6:  MOVF   3B,W
08E7:  MOVWF  3F
08E8:  MOVF   3A,W
08E9:  MOVWF  3E
08EA:  MOVF   39,W
08EB:  MOVWF  3D
08EC:  CLRF   44
08ED:  CLRF   43
08EE:  CLRF   42
08EF:  MOVLW  83
08F0:  MOVWF  41
08F1:  BCF    0A.3
08F2:  CALL   474
08F3:  BSF    0A.3
08F4:  MOVF   7A,W
08F5:  MOVWF  30
08F6:  MOVF   79,W
08F7:  MOVWF  2F
08F8:  MOVF   78,W
08F9:  MOVWF  2E
08FA:  MOVF   77,W
08FB:  MOVWF  2D
....................      // lcd_gotoxy(1, 2);   
....................      // printf(lcd_putc, "A: ");// Go to column 5 row 2 
....................       lcd_gotoxy(2, 2);                                       
08FC:  MOVLW  02
08FD:  MOVWF  47
08FE:  MOVWF  48
08FF:  BCF    0A.3
0900:  CALL   135
0901:  BSF    0A.3
....................       printf(lcd_putc, "%3.0f", temp1); 
0902:  MOVLW  02
0903:  MOVWF  04
0904:  MOVF   30,W
0905:  MOVWF  3C
0906:  MOVF   2F,W
0907:  MOVWF  3B
0908:  MOVF   2E,W
0909:  MOVWF  3A
090A:  MOVF   2D,W
090B:  MOVWF  39
090C:  CLRF   3D
090D:  BCF    0A.3
090E:  CALL   20D
090F:  BSF    0A.3
....................       lcd_putc(223);                             // Print degree symbol ( ° ) 
0910:  MOVLW  DF
0911:  MOVWF  46
0912:  BCF    0A.3
0913:  CALL   147
0914:  BSF    0A.3
....................       lcd_putc("C; ");                            // Print 'C '                                    
0915:  MOVLW  16
0916:  BSF    03.6
0917:  MOVWF  0D
0918:  MOVLW  00
0919:  MOVWF  0F
091A:  BCF    0A.3
091B:  BCF    03.6
091C:  CALL   173
091D:  BSF    0A.3
....................                                                       
....................      // lcd_gotoxy(10, 2);                            
....................     //  lcd_putc("Pwr:  ");                            // Print 'C '                                                      
....................                                                                                  
....................      }              
....................                                                                  
....................       output_high(PIN_D7);                                 
091E:  BSF    03.5
091F:  BCF    08.7
0920:  BCF    03.5
0921:  BSF    08.7
....................       delay_ms(3000);      
0922:  MOVLW  0C
0923:  MOVWF  39
0924:  MOVLW  FA
0925:  MOVWF  47
0926:  BCF    0A.3
0927:  CALL   02B
0928:  BSF    0A.3
0929:  DECFSZ 39,F
092A:  GOTO   124
....................                                                                                     
....................      while(TRUE){  
....................                    
....................    //Min and Max set temperatures 
....................   float min = 0; 
....................   float max = 100;           
092B:  CLRF   34
092C:  CLRF   33
092D:  CLRF   32
092E:  CLRF   31
092F:  CLRF   38
0930:  CLRF   37
0931:  MOVLW  48
0932:  MOVWF  36
0933:  MOVLW  85
0934:  MOVWF  35
....................    
....................   //Turn off LCD backlight 
....................   output_low(PIN_D7);         
0935:  BSF    03.5
0936:  BCF    08.7
0937:  BCF    03.5
0938:  BCF    08.7
....................                                      
....................     if(ds18b20_read(&raw_temp)) {  
0939:  CLRF   3A
093A:  MOVLW  21
093B:  MOVWF  39
093C:  BCF    0A.3
093D:  CALL   3F9
093E:  BSF    0A.3
093F:  MOVF   78,F
0940:  BTFSC  03.2
0941:  GOTO   18D
....................       temp = (float)raw_temp / 16;               // Convert temperature raw value into degree Celsius (temp in °C = raw/16) 
0942:  MOVF   22,W
0943:  MOVWF  3A
0944:  MOVF   21,W
0945:  MOVWF  39
0946:  BCF    0A.3
0947:  CALL   44F
0948:  BSF    0A.3
0949:  MOVF   7A,W
094A:  MOVWF  3C
094B:  MOVF   79,W
094C:  MOVWF  3B
094D:  MOVF   78,W
094E:  MOVWF  3A
094F:  MOVF   77,W
0950:  MOVWF  39
0951:  MOVF   3C,W
0952:  MOVWF  40
0953:  MOVF   3B,W
0954:  MOVWF  3F
0955:  MOVF   3A,W
0956:  MOVWF  3E
0957:  MOVF   39,W
0958:  MOVWF  3D
0959:  CLRF   44
095A:  CLRF   43
095B:  CLRF   42
095C:  MOVLW  83
095D:  MOVWF  41
095E:  BCF    0A.3
095F:  CALL   474
0960:  BSF    0A.3
0961:  MOVF   7A,W
0962:  MOVWF  2C
0963:  MOVF   79,W
0964:  MOVWF  2B
0965:  MOVF   78,W
0966:  MOVWF  2A
0967:  MOVF   77,W
0968:  MOVWF  29
....................    //   lcd_gotoxy(1, 1);                          // Go to column 5 row 2 
....................    //   printf(lcd_putc, "V: "); 
....................       lcd_gotoxy(2, 1);       
0969:  MOVLW  02
096A:  MOVWF  47
096B:  MOVLW  01
096C:  MOVWF  48
096D:  BCF    0A.3
096E:  CALL   135
096F:  BSF    0A.3
....................       printf(lcd_putc, "%3.0f", temp);                                                                                                           
0970:  MOVLW  02
0971:  MOVWF  04
0972:  MOVF   2C,W
0973:  MOVWF  3C
0974:  MOVF   2B,W
0975:  MOVWF  3B
0976:  MOVF   2A,W
0977:  MOVWF  3A
0978:  MOVF   29,W
0979:  MOVWF  39
097A:  CLRF   3D
097B:  BCF    0A.3
097C:  CALL   20D
097D:  BSF    0A.3
....................       lcd_putc(223);                             // Print degree symbol ( ° ) 
097E:  MOVLW  DF
097F:  MOVWF  46
0980:  BCF    0A.3
0981:  CALL   147
0982:  BSF    0A.3
....................       lcd_putc("C; ");                            // Print 'C ' 
0983:  MOVLW  18
0984:  BSF    03.6
0985:  MOVWF  0D
0986:  MOVLW  00
0987:  MOVWF  0F
0988:  BCF    0A.3
0989:  BCF    03.6
098A:  CALL   173
098B:  BSF    0A.3
....................       //lcd_gotoxy(10, 1);     
....................       //lcd_putc("Set:  ");                            // Print 'C '          
....................     }                   
098C:  GOTO   1C1
....................    else 
....................    {               
....................                            
....................     //  An error "handler" is generated if V sensor is not present        
....................       output_high(PIN_D7); 
098D:  BSF    03.5
098E:  BCF    08.7
098F:  BCF    03.5
0990:  BSF    08.7
....................       lcd_putc('\f');                             // LCD clear 
0991:  MOVLW  0C
0992:  MOVWF  46
0993:  BCF    0A.3
0994:  CALL   147
0995:  BSF    0A.3
....................       lcd_gotoxy(5, 1);                          // Go to column 5 row 2 
0996:  MOVLW  05
0997:  MOVWF  47
0998:  MOVLW  01
0999:  MOVWF  48
099A:  BCF    0A.3
099B:  CALL   135
099C:  BSF    0A.3
....................       printf(lcd_putc, "Davikliu");           
099D:  MOVLW  1A
099E:  BSF    03.6
099F:  MOVWF  0D
09A0:  MOVLW  00
09A1:  MOVWF  0F
09A2:  BCF    0A.3
09A3:  BCF    03.6
09A4:  CALL   173
09A5:  BSF    0A.3
....................       lcd_gotoxy(5, 2);                                                  
09A6:  MOVLW  05
09A7:  MOVWF  47
09A8:  MOVLW  02
09A9:  MOVWF  48
09AA:  BCF    0A.3
09AB:  CALL   135
09AC:  BSF    0A.3
....................       printf(lcd_putc, "klaida!");                          
09AD:  MOVLW  1F
09AE:  BSF    03.6
09AF:  MOVWF  0D
09B0:  MOVLW  00
09B1:  MOVWF  0F
09B2:  BCF    0A.3
09B3:  BCF    03.6
09B4:  CALL   173
09B5:  BSF    0A.3
....................       delay_ms(3000);                                            
09B6:  MOVLW  0C
09B7:  MOVWF  39
09B8:  MOVLW  FA
09B9:  MOVWF  47
09BA:  BCF    0A.3
09BB:  CALL   02B
09BC:  BSF    0A.3
09BD:  DECFSZ 39,F
09BE:  GOTO   1B8
....................       reset_cpu();        // Restart CPU     
09BF:  CLRF   0A
09C0:  GOTO   000
....................         }                                                                                  
....................                                                    
....................                                                                
....................      if(ds18b20_read1(&raw_temp1)) {                                     
09C1:  CLRF   3A
09C2:  MOVLW  23
09C3:  MOVWF  39
09C4:  BCF    0A.3
09C5:  CALL   5CA
09C6:  BSF    0A.3
09C7:  MOVF   78,F
09C8:  BTFSC  03.2
09C9:  GOTO   213
....................       temp1 = (float)raw_temp1 / 16;               // Convert temperature raw value into degree Celsius (temp in °C = raw/16) 
09CA:  MOVF   24,W
09CB:  MOVWF  3A
09CC:  MOVF   23,W
09CD:  MOVWF  39
09CE:  BCF    0A.3
09CF:  CALL   44F
09D0:  BSF    0A.3
09D1:  MOVF   7A,W
09D2:  MOVWF  3C
09D3:  MOVF   79,W
09D4:  MOVWF  3B
09D5:  MOVF   78,W
09D6:  MOVWF  3A
09D7:  MOVF   77,W
09D8:  MOVWF  39
09D9:  MOVF   3C,W
09DA:  MOVWF  40
09DB:  MOVF   3B,W
09DC:  MOVWF  3F
09DD:  MOVF   3A,W
09DE:  MOVWF  3E
09DF:  MOVF   39,W
09E0:  MOVWF  3D
09E1:  CLRF   44
09E2:  CLRF   43
09E3:  CLRF   42
09E4:  MOVLW  83
09E5:  MOVWF  41
09E6:  BCF    0A.3
09E7:  CALL   474
09E8:  BSF    0A.3
09E9:  MOVF   7A,W
09EA:  MOVWF  30
09EB:  MOVF   79,W
09EC:  MOVWF  2F
09ED:  MOVF   78,W
09EE:  MOVWF  2E
09EF:  MOVF   77,W
09F0:  MOVWF  2D
....................      // lcd_gotoxy(1, 2);   
....................      // printf(lcd_putc, "A: ");// Go to column 5 row 2 
....................       lcd_gotoxy(2, 2);                                       
09F1:  MOVLW  02
09F2:  MOVWF  47
09F3:  MOVWF  48
09F4:  BCF    0A.3
09F5:  CALL   135
09F6:  BSF    0A.3
....................       printf(lcd_putc, "%3.0f", temp1); 
09F7:  MOVLW  02
09F8:  MOVWF  04
09F9:  MOVF   30,W
09FA:  MOVWF  3C
09FB:  MOVF   2F,W
09FC:  MOVWF  3B
09FD:  MOVF   2E,W
09FE:  MOVWF  3A
09FF:  MOVF   2D,W
0A00:  MOVWF  39
0A01:  CLRF   3D
0A02:  BCF    0A.3
0A03:  CALL   20D
0A04:  BSF    0A.3
....................       lcd_putc(223);                             // Print degree symbol ( ° ) 
0A05:  MOVLW  DF
0A06:  MOVWF  46
0A07:  BCF    0A.3
0A08:  CALL   147
0A09:  BSF    0A.3
....................       lcd_putc("C; ");                            // Print 'C '                                    
0A0A:  MOVLW  23
0A0B:  BSF    03.6
0A0C:  MOVWF  0D
0A0D:  MOVLW  00
0A0E:  MOVWF  0F
0A0F:  BCF    0A.3
0A10:  BCF    03.6
0A11:  CALL   173
0A12:  BSF    0A.3
....................                                                       
....................      // lcd_gotoxy(10, 2);                            
....................     //  lcd_putc("Pwr:  ");                            // Print 'C '                                                      
....................                                                                                  
....................      }                                       
....................                             
....................     /*                                                                                                                      
....................        // In case of total CPU failure 
....................     else {                                                          
....................       lcd_putc('\f');                             // LCD clear 
....................       lcd_gotoxy(5, 2);                          // Go to column 5 row 2 
....................       printf(lcd_putc, " Klaida! "); 
....................       delay_ms(3000);                                            
....................       reset_cpu();        // Restart CPU     
....................     }                        
....................  */      
....................  if(input(pin_B0) == 0) {              
0A13:  BSF    03.5
0A14:  BSF    06.0
0A15:  BCF    03.5
0A16:  BTFSC  06.0
0A17:  GOTO   26F
....................    
....................  //lcd_init();                           
....................  lcd_gotoxy(14,1);                   
0A18:  MOVLW  0E
0A19:  MOVWF  47
0A1A:  MOVLW  01
0A1B:  MOVWF  48
0A1C:  BCF    0A.3
0A1D:  CALL   135
0A1E:  BSF    0A.3
....................  ButtonCounter = ButtonCounter+10;                                                                                                 
0A1F:  BCF    03.1
0A20:  MOVF   28,W
0A21:  MOVWF  3C
0A22:  MOVF   27,W
0A23:  MOVWF  3B
0A24:  MOVF   26,W
0A25:  MOVWF  3A
0A26:  MOVF   25,W
0A27:  MOVWF  39
0A28:  CLRF   40
0A29:  CLRF   3F
0A2A:  MOVLW  20
0A2B:  MOVWF  3E
0A2C:  MOVLW  82
0A2D:  MOVWF  3D
0A2E:  BCF    0A.3
0A2F:  CALL   620
0A30:  BSF    0A.3
0A31:  MOVF   7A,W
0A32:  MOVWF  28
0A33:  MOVF   79,W
0A34:  MOVWF  27
0A35:  MOVF   78,W
0A36:  MOVWF  26
0A37:  MOVF   77,W
0A38:  MOVWF  25
....................  printf(lcd_putc, "%3.0f",ButtonCounter);     
0A39:  MOVLW  02
0A3A:  MOVWF  04
0A3B:  MOVF   28,W
0A3C:  MOVWF  3C
0A3D:  MOVF   27,W
0A3E:  MOVWF  3B
0A3F:  MOVF   26,W
0A40:  MOVWF  3A
0A41:  MOVF   25,W
0A42:  MOVWF  39
0A43:  CLRF   3D
0A44:  BCF    0A.3
0A45:  CALL   20D
0A46:  BSF    0A.3
....................  output_high(PIN_D7); 
0A47:  BSF    03.5
0A48:  BCF    08.7
0A49:  BCF    03.5
0A4A:  BSF    08.7
....................  delay_ms(2000); 
0A4B:  MOVLW  08
0A4C:  MOVWF  39
0A4D:  MOVLW  FA
0A4E:  MOVWF  47
0A4F:  BCF    0A.3
0A50:  CALL   02B
0A51:  BSF    0A.3
0A52:  DECFSZ 39,F
0A53:  GOTO   24D
....................      
....................     if (ButtonCounter == max){    
0A54:  MOVF   28,W
0A55:  MOVWF  3C
0A56:  MOVF   27,W
0A57:  MOVWF  3B
0A58:  MOVF   26,W
0A59:  MOVWF  3A
0A5A:  MOVF   25,W
0A5B:  MOVWF  39
0A5C:  MOVF   38,W
0A5D:  MOVWF  40
0A5E:  MOVF   37,W
0A5F:  MOVWF  3F
0A60:  MOVF   36,W
0A61:  MOVWF  3E
0A62:  MOVF   35,W
0A63:  MOVWF  3D
0A64:  BCF    0A.3
0A65:  CALL   761
0A66:  BSF    0A.3
0A67:  BTFSS  03.2
0A68:  GOTO   26F
....................    ButtonCounter = 10;                            
0A69:  CLRF   28
0A6A:  CLRF   27
0A6B:  MOVLW  20
0A6C:  MOVWF  26
0A6D:  MOVLW  82
0A6E:  MOVWF  25
....................  }                            
....................  }                                           
....................                                                                                                                                                                                                                                                                                                                                                                                       
.................... if(input(pin_B4) == 0) {           
0A6F:  BSF    03.5
0A70:  BSF    06.4
0A71:  BCF    03.5
0A72:  BTFSC  06.4
0A73:  GOTO   2CD
....................                                        
....................  lcd_gotoxy(14,1);                             
0A74:  MOVLW  0E
0A75:  MOVWF  47
0A76:  MOVLW  01
0A77:  MOVWF  48
0A78:  BCF    0A.3
0A79:  CALL   135
0A7A:  BSF    0A.3
....................  ButtonCounter = ButtonCounter-10;                                          
0A7B:  BSF    03.1
0A7C:  MOVF   28,W
0A7D:  MOVWF  3C
0A7E:  MOVF   27,W
0A7F:  MOVWF  3B
0A80:  MOVF   26,W
0A81:  MOVWF  3A
0A82:  MOVF   25,W
0A83:  MOVWF  39
0A84:  CLRF   40
0A85:  CLRF   3F
0A86:  MOVLW  20
0A87:  MOVWF  3E
0A88:  MOVLW  82
0A89:  MOVWF  3D
0A8A:  BCF    0A.3
0A8B:  CALL   620
0A8C:  BSF    0A.3
0A8D:  MOVF   7A,W
0A8E:  MOVWF  28
0A8F:  MOVF   79,W
0A90:  MOVWF  27
0A91:  MOVF   78,W
0A92:  MOVWF  26
0A93:  MOVF   77,W
0A94:  MOVWF  25
....................  printf(lcd_putc, "%3.0f",ButtonCounter); 
0A95:  MOVLW  02
0A96:  MOVWF  04
0A97:  MOVF   28,W
0A98:  MOVWF  3C
0A99:  MOVF   27,W
0A9A:  MOVWF  3B
0A9B:  MOVF   26,W
0A9C:  MOVWF  3A
0A9D:  MOVF   25,W
0A9E:  MOVWF  39
0A9F:  CLRF   3D
0AA0:  BCF    0A.3
0AA1:  CALL   20D
0AA2:  BSF    0A.3
....................  output_high(PIN_D7);        
0AA3:  BSF    03.5
0AA4:  BCF    08.7
0AA5:  BCF    03.5
0AA6:  BSF    08.7
....................  delay_ms(2000);       
0AA7:  MOVLW  08
0AA8:  MOVWF  39
0AA9:  MOVLW  FA
0AAA:  MOVWF  47
0AAB:  BCF    0A.3
0AAC:  CALL   02B
0AAD:  BSF    0A.3
0AAE:  DECFSZ 39,F
0AAF:  GOTO   2A9
....................   
....................      if (ButtonCounter <= min){    
0AB0:  MOVF   28,W
0AB1:  MOVWF  3C
0AB2:  MOVF   27,W
0AB3:  MOVWF  3B
0AB4:  MOVF   26,W
0AB5:  MOVWF  3A
0AB6:  MOVF   25,W
0AB7:  MOVWF  39
0AB8:  MOVF   34,W
0AB9:  MOVWF  40
0ABA:  MOVF   33,W
0ABB:  MOVWF  3F
0ABC:  MOVF   32,W
0ABD:  MOVWF  3E
0ABE:  MOVF   31,W
0ABF:  MOVWF  3D
0AC0:  BCF    0A.3
0AC1:  CALL   761
0AC2:  BSF    0A.3
0AC3:  BTFSC  03.0
0AC4:  GOTO   2C7
0AC5:  BTFSS  03.2
0AC6:  GOTO   2CD
....................    ButtonCounter = 10;       
0AC7:  CLRF   28
0AC8:  CLRF   27
0AC9:  MOVLW  20
0ACA:  MOVWF  26
0ACB:  MOVLW  82
0ACC:  MOVWF  25
....................      }                                 
....................  }                            
....................                                                                                          
....................                              
....................     if (temp >= ButtonCounter){           
0ACD:  MOVF   28,W
0ACE:  MOVWF  3C
0ACF:  MOVF   27,W
0AD0:  MOVWF  3B
0AD1:  MOVF   26,W
0AD2:  MOVWF  3A
0AD3:  MOVF   25,W
0AD4:  MOVWF  39
0AD5:  MOVF   2C,W
0AD6:  MOVWF  40
0AD7:  MOVF   2B,W
0AD8:  MOVWF  3F
0AD9:  MOVF   2A,W
0ADA:  MOVWF  3E
0ADB:  MOVF   29,W
0ADC:  MOVWF  3D
0ADD:  BCF    0A.3
0ADE:  CALL   761
0ADF:  BSF    0A.3
0AE0:  BTFSC  03.0
0AE1:  GOTO   2E4
0AE2:  BTFSS  03.2
0AE3:  GOTO   2FE
....................      output_high(pin_B5);                    
0AE4:  BSF    03.5
0AE5:  BCF    06.5
0AE6:  BCF    03.5
0AE7:  BSF    06.5
....................     // delay_ms(5000);             
....................      lcd_gotoxy(14, 2);      
0AE8:  MOVLW  0E
0AE9:  MOVWF  47
0AEA:  MOVLW  02
0AEB:  MOVWF  48
0AEC:  BCF    0A.3
0AED:  CALL   135
0AEE:  BSF    0A.3
....................      printf(lcd_putc, "On "); 
0AEF:  MOVLW  4F
0AF0:  MOVWF  46
0AF1:  BCF    0A.3
0AF2:  CALL   147
0AF3:  BSF    0A.3
0AF4:  MOVLW  6E
0AF5:  MOVWF  46
0AF6:  BCF    0A.3
0AF7:  CALL   147
0AF8:  BSF    0A.3
0AF9:  MOVLW  20
0AFA:  MOVWF  46
0AFB:  BCF    0A.3
0AFC:  CALL   147
0AFD:  BSF    0A.3
....................     }    
....................                                                                      
....................     if (temp <= ButtonCounter || temp == temp1){  
0AFE:  MOVF   2C,W
0AFF:  MOVWF  3C
0B00:  MOVF   2B,W
0B01:  MOVWF  3B
0B02:  MOVF   2A,W
0B03:  MOVWF  3A
0B04:  MOVF   29,W
0B05:  MOVWF  39
0B06:  MOVF   28,W
0B07:  MOVWF  40
0B08:  MOVF   27,W
0B09:  MOVWF  3F
0B0A:  MOVF   26,W
0B0B:  MOVWF  3E
0B0C:  MOVF   25,W
0B0D:  MOVWF  3D
0B0E:  BCF    0A.3
0B0F:  CALL   761
0B10:  BSF    0A.3
0B11:  BTFSC  03.0
0B12:  GOTO   32A
0B13:  BTFSC  03.2
0B14:  GOTO   32A
0B15:  MOVF   2C,W
0B16:  MOVWF  3C
0B17:  MOVF   2B,W
0B18:  MOVWF  3B
0B19:  MOVF   2A,W
0B1A:  MOVWF  3A
0B1B:  MOVF   29,W
0B1C:  MOVWF  39
0B1D:  MOVF   30,W
0B1E:  MOVWF  40
0B1F:  MOVF   2F,W
0B20:  MOVWF  3F
0B21:  MOVF   2E,W
0B22:  MOVWF  3E
0B23:  MOVF   2D,W
0B24:  MOVWF  3D
0B25:  BCF    0A.3
0B26:  CALL   761
0B27:  BSF    0A.3
0B28:  BTFSS  03.2
0B29:  GOTO   33E
....................      output_low(pin_B5);                   
0B2A:  BSF    03.5
0B2B:  BCF    06.5
0B2C:  BCF    03.5
0B2D:  BCF    06.5
....................     // delay_ms(5000);             
....................      lcd_gotoxy(14, 2);                                
0B2E:  MOVLW  0E
0B2F:  MOVWF  47
0B30:  MOVLW  02
0B31:  MOVWF  48
0B32:  BCF    0A.3
0B33:  CALL   135
0B34:  BSF    0A.3
....................      printf(lcd_putc, "Off ");                    
0B35:  MOVLW  25
0B36:  BSF    03.6
0B37:  MOVWF  0D
0B38:  MOVLW  00
0B39:  MOVWF  0F
0B3A:  BCF    0A.3
0B3B:  BCF    03.6
0B3C:  CALL   173
0B3D:  BSF    0A.3
....................     } 
....................      
....................     if(ButtonCounter == 10){    
0B3E:  MOVF   28,W
0B3F:  MOVWF  3C
0B40:  MOVF   27,W
0B41:  MOVWF  3B
0B42:  MOVF   26,W
0B43:  MOVWF  3A
0B44:  MOVF   25,W
0B45:  MOVWF  39
0B46:  CLRF   40
0B47:  CLRF   3F
0B48:  MOVLW  20
0B49:  MOVWF  3E
0B4A:  MOVLW  82
0B4B:  MOVWF  3D
0B4C:  BCF    0A.3
0B4D:  CALL   761
0B4E:  BSF    0A.3
0B4F:  BTFSS  03.2
0B50:  GOTO   365
....................      output_low(pin_B5);                   
0B51:  BSF    03.5
0B52:  BCF    06.5
0B53:  BCF    03.5
0B54:  BCF    06.5
....................     // delay_ms(5000);             
....................      lcd_gotoxy(14, 2);                                
0B55:  MOVLW  0E
0B56:  MOVWF  47
0B57:  MOVLW  02
0B58:  MOVWF  48
0B59:  BCF    0A.3
0B5A:  CALL   135
0B5B:  BSF    0A.3
....................      printf(lcd_putc, "Off ");   
0B5C:  MOVLW  28
0B5D:  BSF    03.6
0B5E:  MOVWF  0D
0B5F:  MOVLW  00
0B60:  MOVWF  0F
0B61:  BCF    0A.3
0B62:  BCF    03.6
0B63:  CALL   173
0B64:  BSF    0A.3
....................     } 
0B65:  GOTO   12B
....................                                                                                                   
....................      }                                                                                                                                                                       
....................      reset_cpu();    
0B66:  CLRF   0A
0B67:  GOTO   000
....................     delay_ms(2000); 
0B68:  MOVLW  08
0B69:  MOVWF  39
0B6A:  MOVLW  FA
0B6B:  MOVWF  47
0B6C:  BCF    0A.3
0B6D:  CALL   02B
0B6E:  BSF    0A.3
0B6F:  DECFSZ 39,F
0B70:  GOTO   36A
....................  }                                 
....................   
0B71:  SLEEP
....................     // End of code 
....................     

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
