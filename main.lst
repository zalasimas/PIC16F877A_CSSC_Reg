CCS PCM C Compiler, Version 5.008, 5967               19-liep.-20 14:13

               Filename:   C:\Users\HP\Desktop\dok\proj\temp_controller\software\CSSC\main.lst

               ROM used:   2803 words (34%)
                           Largest free fragment is 2048
               RAM used:   37 (10%) at main() level
                           65 (18%) worst case
               Stack used: 6 locations
               Stack size: 8

*
0000:  MOVLW  0A
0001:  MOVWF  0A
0002:  GOTO   259
0003:  NOP
....................              
....................   /*  
....................   Dual stage solar heater controller v1.1     
....................    
....................     
....................   Comparing two temperatures together. If upper temperature have reached set temperature,                             
....................   the water pump is switched on. After that, upper temperature is falling and bottom temperature                                                                            
....................   increasing. So, theoretically this two temperatures must face together.      
....................      
....................    If this theoretical model will be wrong, then will need to set reference temperature 
....................    (about 35 C). And compare bottom temperature with this reference. If bottom temperature will 
....................    reach reference - the water pump will be switched off. One more thing - reference temperature 
....................    must be set under real device working conditions. 
....................     
....................    by Simas Za  
....................     
....................   =============                                       
....................     
....................    Versions:  
....................     
....................    V1.0: 
....................    * Working upper temperature pump control;                                 
....................    * Working user buttons (because of lack of separation of the measurement process buttons response is very slowly); 
....................    * Working LCD backlight according to user button presses;            
....................    * Increasing and decreasing set temperature every 10 degrees celsius.    
....................                
....................    V1.1(current - need to test in real working conditions): 
....................    * Working upper and bottom temperature pump control. The temperatures of each stage can response to its threshold; 
....................    * Added user set temperature mode after turning on the device. For this reason buttons became convenient and fast response;        
....................    * Removed LCD backlight manipulation according to the button presses (now backlight running continuously); 
....................    * Added debounce in some "warning" places.   
....................                                                         
....................    */                                                                     
....................                                                                           
....................                                                                       
....................                                                                       
.................... #include "main.h"                                                                 
....................  
.................... #ifndef MAIN_H 
.................... #define MAIN_H 
....................                         
....................            
.................... //LCD module connections              
.................... #define LCD_RS_PIN      PIN_D0                                
.................... #define LCD_RW_PIN      PIN_D1 
.................... #define LCD_ENABLE_PIN  PIN_D2                   
.................... #define LCD_DATA4       PIN_D3                                                                             
.................... #define LCD_DATA5       PIN_D4 
.................... #define LCD_DATA6       PIN_D5                                       
.................... #define LCD_DATA7       PIN_D6                                  
.................... //End LCD module connections    
....................                 
....................                 
.................... #include <16F877A.h>                          
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA D3,32
000D:  DATA 74,1D
000E:  DATA 20,00
000F:  DATA D0,3B
0010:  DATA 72,1D
0011:  DATA 00,01
0012:  DATA 4F,33
0013:  DATA 66,10
0014:  DATA 00,00
0015:  DATA C3,1D
0016:  DATA 20,00
0017:  DATA C3,1D
0018:  DATA 20,00
0019:  DATA C4,30
001A:  DATA F6,34
001B:  DATA 6B,36
001C:  DATA E9,3A
001D:  DATA 00,01
001E:  DATA 6B,36
001F:  DATA E1,34
0020:  DATA E4,30
0021:  DATA 21,00
0022:  DATA CE,3A
0023:  DATA 73,3A
0024:  DATA 61,3A
0025:  DATA F9,35
0026:  DATA 69,3A
0027:  DATA 65,1D
0028:  DATA 20,00
0029:  DATA 43,00
002A:  DATA 4F,33
002B:  DATA 66,10
002C:  DATA 00,01
002D:  DATA 4F,33
002E:  DATA 66,10
002F:  DATA 00,00
*
0178:  MOVF   0B,W
0179:  MOVWF  42
017A:  BCF    0B.7
017B:  BSF    03.5
017C:  BSF    03.6
017D:  BSF    0C.7
017E:  BSF    0C.0
017F:  NOP
0180:  NOP
0181:  BCF    03.5
0182:  MOVF   0C,W
0183:  ANDLW  7F
0184:  BTFSC  03.2
0185:  GOTO   1BF
0186:  BCF    03.6
0187:  MOVWF  43
0188:  BSF    03.6
0189:  MOVF   0D,W
018A:  BCF    03.6
018B:  MOVWF  44
018C:  BSF    03.6
018D:  MOVF   0F,W
018E:  BCF    03.6
018F:  MOVWF  45
0190:  MOVF   43,W
0191:  MOVWF  4F
0192:  CALL   14C
0193:  MOVF   44,W
0194:  BSF    03.6
0195:  MOVWF  0D
0196:  BCF    03.6
0197:  MOVF   45,W
0198:  BSF    03.6
0199:  MOVWF  0F
019A:  BSF    03.5
019B:  BSF    0C.7
019C:  BSF    0C.0
019D:  NOP
019E:  NOP
019F:  BCF    03.5
01A0:  RLF    0C,W
01A1:  RLF    0E,W
01A2:  ANDLW  7F
01A3:  BTFSC  03.2
01A4:  GOTO   1BF
01A5:  BCF    03.6
01A6:  MOVWF  43
01A7:  BSF    03.6
01A8:  MOVF   0D,W
01A9:  BCF    03.6
01AA:  MOVWF  44
01AB:  BSF    03.6
01AC:  MOVF   0F,W
01AD:  BCF    03.6
01AE:  MOVWF  45
01AF:  MOVF   43,W
01B0:  MOVWF  4F
01B1:  CALL   14C
01B2:  MOVF   44,W
01B3:  BSF    03.6
01B4:  MOVWF  0D
01B5:  BCF    03.6
01B6:  MOVF   45,W
01B7:  BSF    03.6
01B8:  MOVWF  0F
01B9:  INCF   0D,F
01BA:  BTFSC  03.2
01BB:  INCF   0F,F
01BC:  BCF    03.6
01BD:  GOTO   17B
01BE:  BSF    03.6
01BF:  BCF    03.6
01C0:  BTFSC  42.7
01C1:  BSF    0B.7
01C2:  RETURN
01C3:  MOVLW  80
01C4:  BTFSC  03.1
01C5:  XORWF  47,F
01C6:  CLRF   4C
01C7:  CLRF   4D
01C8:  MOVF   43,W
01C9:  MOVWF  4B
01CA:  MOVF   47,W
01CB:  XORWF  4B,F
01CC:  MOVF   42,W
01CD:  BTFSC  03.2
01CE:  GOTO   2B3
01CF:  MOVWF  4A
01D0:  MOVWF  77
01D1:  MOVF   46,W
01D2:  BTFSC  03.2
01D3:  GOTO   2BC
01D4:  SUBWF  4A,F
01D5:  BTFSC  03.2
01D6:  GOTO   258
01D7:  BTFSS  03.0
01D8:  GOTO   216
01D9:  MOVF   47,W
01DA:  MOVWF  50
01DB:  BSF    50.7
01DC:  MOVF   48,W
01DD:  MOVWF  4F
01DE:  MOVF   49,W
01DF:  MOVWF  4E
01E0:  CLRF   4D
01E1:  BCF    03.0
01E2:  RRF    50,F
01E3:  RRF    4F,F
01E4:  RRF    4E,F
01E5:  RRF    4D,F
01E6:  DECFSZ 4A,F
01E7:  GOTO   1E0
01E8:  BTFSS  4B.7
01E9:  GOTO   1ED
01EA:  BSF    4C.0
01EB:  GOTO   2D0
01EC:  BCF    4C.0
01ED:  BCF    4A.0
01EE:  BSF    4C.4
01EF:  MOVLW  45
01F0:  MOVWF  04
01F1:  BCF    03.7
01F2:  GOTO   2E5
01F3:  BCF    4C.4
01F4:  BTFSC  4B.7
01F5:  GOTO   200
01F6:  BTFSS  4A.0
01F7:  GOTO   20B
01F8:  RRF    50,F
01F9:  RRF    4F,F
01FA:  RRF    4E,F
01FB:  RRF    4D,F
01FC:  INCF   77,F
01FD:  BTFSC  03.2
01FE:  GOTO   2CB
01FF:  GOTO   20B
0200:  BTFSC  50.7
0201:  GOTO   20E
0202:  BCF    03.0
0203:  RLF    4D,F
0204:  RLF    4E,F
0205:  RLF    4F,F
0206:  RLF    50,F
0207:  DECF   77,F
0208:  BTFSC  03.2
0209:  GOTO   2CB
020A:  GOTO   200
020B:  BSF    4C.6
020C:  GOTO   278
020D:  BCF    4C.6
020E:  MOVF   43,W
020F:  MOVWF  4B
0210:  BTFSS  4B.7
0211:  GOTO   214
0212:  BSF    50.7
0213:  GOTO   2C4
0214:  BCF    50.7
0215:  GOTO   2C4
0216:  MOVF   46,W
0217:  MOVWF  4A
0218:  MOVWF  77
0219:  MOVF   42,W
021A:  SUBWF  4A,F
021B:  MOVF   43,W
021C:  MOVWF  50
021D:  BSF    50.7
021E:  MOVF   44,W
021F:  MOVWF  4F
0220:  MOVF   45,W
0221:  MOVWF  4E
0222:  CLRF   4D
0223:  BCF    03.0
0224:  RRF    50,F
0225:  RRF    4F,F
0226:  RRF    4E,F
0227:  RRF    4D,F
0228:  DECFSZ 4A,F
0229:  GOTO   222
022A:  BTFSS  4B.7
022B:  GOTO   22F
022C:  BSF    4C.1
022D:  GOTO   2D0
022E:  BCF    4C.1
022F:  BCF    4A.0
0230:  BSF    4C.5
0231:  MOVLW  49
0232:  MOVWF  04
0233:  BCF    03.7
0234:  GOTO   2E5
0235:  BCF    4C.5
0236:  BTFSC  4B.7
0237:  GOTO   242
0238:  BTFSS  4A.0
0239:  GOTO   24D
023A:  RRF    50,F
023B:  RRF    4F,F
023C:  RRF    4E,F
023D:  RRF    4D,F
023E:  INCF   77,F
023F:  BTFSC  03.2
0240:  GOTO   2CB
0241:  GOTO   24D
0242:  BTFSC  50.7
0243:  GOTO   250
0244:  BCF    03.0
0245:  RLF    4D,F
0246:  RLF    4E,F
0247:  RLF    4F,F
0248:  RLF    50,F
0249:  DECF   77,F
024A:  BTFSC  03.2
024B:  GOTO   2CB
024C:  GOTO   242
024D:  BSF    4C.7
024E:  GOTO   278
024F:  BCF    4C.7
0250:  MOVF   47,W
0251:  MOVWF  4B
0252:  BTFSS  4B.7
0253:  GOTO   256
0254:  BSF    50.7
0255:  GOTO   2C4
0256:  BCF    50.7
0257:  GOTO   2C4
0258:  MOVF   47,W
0259:  MOVWF  50
025A:  BSF    50.7
025B:  MOVF   48,W
025C:  MOVWF  4F
025D:  MOVF   49,W
025E:  MOVWF  4E
025F:  BTFSS  4B.7
0260:  GOTO   265
0261:  BCF    50.7
0262:  BSF    4C.2
0263:  GOTO   2D0
0264:  BCF    4C.2
0265:  CLRF   4D
0266:  BCF    4A.0
0267:  MOVLW  45
0268:  MOVWF  04
0269:  BCF    03.7
026A:  GOTO   2E5
026B:  BTFSC  4B.7
026C:  GOTO   28E
026D:  MOVF   43,W
026E:  MOVWF  4B
026F:  BTFSS  4A.0
0270:  GOTO   278
0271:  RRF    50,F
0272:  RRF    4F,F
0273:  RRF    4E,F
0274:  RRF    4D,F
0275:  INCF   77,F
0276:  BTFSC  03.2
0277:  GOTO   2CB
0278:  BTFSS  4D.7
0279:  GOTO   289
027A:  INCF   4E,F
027B:  BTFSS  03.2
027C:  GOTO   289
027D:  INCF   4F,F
027E:  BTFSS  03.2
027F:  GOTO   289
0280:  INCF   50,F
0281:  BTFSS  03.2
0282:  GOTO   289
0283:  RRF    50,F
0284:  RRF    4F,F
0285:  RRF    4E,F
0286:  INCF   77,F
0287:  BTFSC  03.2
0288:  GOTO   2CB
0289:  BTFSC  4C.6
028A:  GOTO   20D
028B:  BTFSC  4C.7
028C:  GOTO   24F
028D:  GOTO   2AD
028E:  MOVLW  80
028F:  XORWF  50,F
0290:  BTFSS  50.7
0291:  GOTO   296
0292:  GOTO   2D0
0293:  MOVF   47,W
0294:  MOVWF  4B
0295:  GOTO   2A3
0296:  MOVF   43,W
0297:  MOVWF  4B
0298:  MOVF   50,F
0299:  BTFSS  03.2
029A:  GOTO   2A3
029B:  MOVF   4F,F
029C:  BTFSS  03.2
029D:  GOTO   2A3
029E:  MOVF   4E,F
029F:  BTFSS  03.2
02A0:  GOTO   2A3
02A1:  CLRF   77
02A2:  GOTO   2C4
02A3:  BTFSC  50.7
02A4:  GOTO   2AD
02A5:  BCF    03.0
02A6:  RLF    4D,F
02A7:  RLF    4E,F
02A8:  RLF    4F,F
02A9:  RLF    50,F
02AA:  DECFSZ 77,F
02AB:  GOTO   2A3
02AC:  GOTO   2CB
02AD:  BTFSS  4B.7
02AE:  GOTO   2B1
02AF:  BSF    50.7
02B0:  GOTO   2C4
02B1:  BCF    50.7
02B2:  GOTO   2C4
02B3:  MOVF   46,W
02B4:  MOVWF  77
02B5:  MOVF   47,W
02B6:  MOVWF  50
02B7:  MOVF   48,W
02B8:  MOVWF  4F
02B9:  MOVF   49,W
02BA:  MOVWF  4E
02BB:  GOTO   2C4
02BC:  MOVF   42,W
02BD:  MOVWF  77
02BE:  MOVF   43,W
02BF:  MOVWF  50
02C0:  MOVF   44,W
02C1:  MOVWF  4F
02C2:  MOVF   45,W
02C3:  MOVWF  4E
02C4:  MOVF   50,W
02C5:  MOVWF  78
02C6:  MOVF   4F,W
02C7:  MOVWF  79
02C8:  MOVF   4E,W
02C9:  MOVWF  7A
02CA:  GOTO   303
02CB:  CLRF   77
02CC:  CLRF   78
02CD:  CLRF   79
02CE:  CLRF   7A
02CF:  GOTO   303
02D0:  CLRF   4D
02D1:  COMF   4E,F
02D2:  COMF   4F,F
02D3:  COMF   50,F
02D4:  COMF   4D,F
02D5:  INCF   4D,F
02D6:  BTFSS  03.2
02D7:  GOTO   2DE
02D8:  INCF   4E,F
02D9:  BTFSS  03.2
02DA:  GOTO   2DE
02DB:  INCF   4F,F
02DC:  BTFSC  03.2
02DD:  INCF   50,F
02DE:  BTFSC  4C.0
02DF:  GOTO   1EC
02E0:  BTFSC  4C.1
02E1:  GOTO   22E
02E2:  BTFSC  4C.2
02E3:  GOTO   264
02E4:  GOTO   293
02E5:  MOVF   00,W
02E6:  ADDWF  4E,F
02E7:  BTFSS  03.0
02E8:  GOTO   2EF
02E9:  INCF   4F,F
02EA:  BTFSS  03.2
02EB:  GOTO   2EF
02EC:  INCF   50,F
02ED:  BTFSC  03.2
02EE:  BSF    4A.0
02EF:  DECF   04,F
02F0:  MOVF   00,W
02F1:  ADDWF  4F,F
02F2:  BTFSS  03.0
02F3:  GOTO   2F7
02F4:  INCF   50,F
02F5:  BTFSC  03.2
02F6:  BSF    4A.0
02F7:  DECF   04,F
02F8:  MOVF   00,W
02F9:  BTFSS  00.7
02FA:  XORLW  80
02FB:  ADDWF  50,F
02FC:  BTFSC  03.0
02FD:  BSF    4A.0
02FE:  BTFSC  4C.4
02FF:  GOTO   1F3
0300:  BTFSC  4C.5
0301:  GOTO   235
0302:  GOTO   26B
0303:  RETURN
0304:  BTFSC  03.1
0305:  GOTO   309
0306:  MOVLW  57
0307:  MOVWF  04
0308:  BCF    03.7
0309:  CLRF   77
030A:  CLRF   78
030B:  CLRF   79
030C:  CLRF   7A
030D:  CLRF   57
030E:  CLRF   58
030F:  CLRF   59
0310:  CLRF   5A
0311:  MOVF   56,W
0312:  IORWF  55,W
0313:  IORWF  54,W
0314:  IORWF  53,W
0315:  BTFSC  03.2
0316:  GOTO   347
0317:  MOVLW  20
0318:  MOVWF  5B
0319:  BCF    03.0
031A:  RLF    4F,F
031B:  RLF    50,F
031C:  RLF    51,F
031D:  RLF    52,F
031E:  RLF    57,F
031F:  RLF    58,F
0320:  RLF    59,F
0321:  RLF    5A,F
0322:  MOVF   56,W
0323:  SUBWF  5A,W
0324:  BTFSS  03.2
0325:  GOTO   330
0326:  MOVF   55,W
0327:  SUBWF  59,W
0328:  BTFSS  03.2
0329:  GOTO   330
032A:  MOVF   54,W
032B:  SUBWF  58,W
032C:  BTFSS  03.2
032D:  GOTO   330
032E:  MOVF   53,W
032F:  SUBWF  57,W
0330:  BTFSS  03.0
0331:  GOTO   341
0332:  MOVF   53,W
0333:  SUBWF  57,F
0334:  MOVF   54,W
0335:  BTFSS  03.0
0336:  INCFSZ 54,W
0337:  SUBWF  58,F
0338:  MOVF   55,W
0339:  BTFSS  03.0
033A:  INCFSZ 55,W
033B:  SUBWF  59,F
033C:  MOVF   56,W
033D:  BTFSS  03.0
033E:  INCFSZ 56,W
033F:  SUBWF  5A,F
0340:  BSF    03.0
0341:  RLF    77,F
0342:  RLF    78,F
0343:  RLF    79,F
0344:  RLF    7A,F
0345:  DECFSZ 5B,F
0346:  GOTO   319
0347:  MOVF   57,W
0348:  MOVWF  00
0349:  INCF   04,F
034A:  MOVF   58,W
034B:  MOVWF  00
034C:  INCF   04,F
034D:  MOVF   59,W
034E:  MOVWF  00
034F:  INCF   04,F
0350:  MOVF   5A,W
0351:  MOVWF  00
0352:  RETURN
0353:  MOVF   04,W
0354:  MOVWF  47
0355:  MOVF   46,W
0356:  MOVWF  49
0357:  BTFSC  03.2
0358:  GOTO   3E5
0359:  MOVF   45,W
035A:  MOVWF  52
035B:  MOVF   44,W
035C:  MOVWF  51
035D:  MOVF   43,W
035E:  MOVWF  50
035F:  MOVF   42,W
0360:  MOVWF  4F
0361:  CLRF   56
0362:  CLRF   55
0363:  MOVLW  20
0364:  MOVWF  54
0365:  MOVLW  82
0366:  MOVWF  53
0367:  MOVF   4F,W
0368:  BTFSC  03.2
0369:  GOTO   3D7
036A:  MOVWF  57
036B:  MOVF   53,W
036C:  BTFSC  03.2
036D:  GOTO   3D7
036E:  ADDWF  57,F
036F:  BTFSC  03.0
0370:  GOTO   378
0371:  MOVLW  7F
0372:  SUBWF  57,F
0373:  BTFSS  03.0
0374:  GOTO   3D7
0375:  BTFSC  03.2
0376:  GOTO   3D7
0377:  GOTO   37C
0378:  MOVLW  81
0379:  ADDWF  57,F
037A:  BTFSC  03.0
037B:  GOTO   3D7
037C:  MOVF   57,W
037D:  MOVWF  77
037E:  CLRF   78
037F:  CLRF   79
0380:  CLRF   7A
0381:  MOVF   50,W
0382:  MOVWF  5B
0383:  BSF    5B.7
0384:  MOVF   51,W
0385:  MOVWF  5A
0386:  MOVF   52,W
0387:  MOVWF  59
0388:  MOVLW  18
0389:  MOVWF  57
038A:  CLRF   58
038B:  BTFSS  59.0
038C:  GOTO   3A5
038D:  MOVF   56,W
038E:  ADDWF  7A,F
038F:  BTFSS  03.0
0390:  GOTO   397
0391:  INCF   79,F
0392:  BTFSS  03.2
0393:  GOTO   397
0394:  INCF   78,F
0395:  BTFSC  03.2
0396:  BSF    58.7
0397:  MOVF   55,W
0398:  ADDWF  79,F
0399:  BTFSS  03.0
039A:  GOTO   39E
039B:  INCF   78,F
039C:  BTFSC  03.2
039D:  BSF    58.7
039E:  MOVF   54,W
039F:  MOVWF  51
03A0:  BSF    51.7
03A1:  MOVF   51,W
03A2:  ADDWF  78,F
03A3:  BTFSC  03.0
03A4:  BSF    58.7
03A5:  RLF    58,F
03A6:  RRF    78,F
03A7:  RRF    79,F
03A8:  RRF    7A,F
03A9:  RRF    5B,F
03AA:  RRF    5A,F
03AB:  RRF    59,F
03AC:  BCF    03.0
03AD:  DECFSZ 57,F
03AE:  GOTO   38A
03AF:  MOVLW  01
03B0:  ADDWF  77,F
03B1:  BTFSC  03.0
03B2:  GOTO   3D7
03B3:  BTFSC  78.7
03B4:  GOTO   3BC
03B5:  RLF    5B,F
03B6:  RLF    7A,F
03B7:  RLF    79,F
03B8:  RLF    78,F
03B9:  DECF   77,F
03BA:  BTFSC  03.2
03BB:  GOTO   3D7
03BC:  BTFSS  5B.7
03BD:  GOTO   3CD
03BE:  INCF   7A,F
03BF:  BTFSS  03.2
03C0:  GOTO   3CD
03C1:  INCF   79,F
03C2:  BTFSS  03.2
03C3:  GOTO   3CD
03C4:  INCF   78,F
03C5:  BTFSS  03.2
03C6:  GOTO   3CD
03C7:  RRF    78,F
03C8:  RRF    79,F
03C9:  RRF    7A,F
03CA:  INCF   77,F
03CB:  BTFSC  03.2
03CC:  GOTO   3D7
03CD:  MOVF   50,W
03CE:  MOVWF  58
03CF:  MOVF   54,W
03D0:  XORWF  58,F
03D1:  BTFSS  58.7
03D2:  GOTO   3D5
03D3:  BSF    78.7
03D4:  GOTO   3DB
03D5:  BCF    78.7
03D6:  GOTO   3DB
03D7:  CLRF   77
03D8:  CLRF   78
03D9:  CLRF   79
03DA:  CLRF   7A
03DB:  MOVF   7A,W
03DC:  MOVWF  45
03DD:  MOVF   79,W
03DE:  MOVWF  44
03DF:  MOVF   78,W
03E0:  MOVWF  43
03E1:  MOVF   77,W
03E2:  MOVWF  42
03E3:  DECFSZ 49,F
03E4:  GOTO   359
03E5:  MOVF   45,W
03E6:  MOVWF  52
03E7:  MOVF   44,W
03E8:  MOVWF  51
03E9:  MOVF   43,W
03EA:  MOVWF  50
03EB:  MOVF   42,W
03EC:  MOVWF  4F
03ED:  MOVF   4F,W
03EE:  SUBLW  B6
03EF:  MOVWF  4F
03F0:  CLRF   7A
03F1:  MOVF   50,W
03F2:  MOVWF  53
03F3:  BSF    50.7
03F4:  BCF    03.0
03F5:  RRF    50,F
03F6:  RRF    51,F
03F7:  RRF    52,F
03F8:  RRF    7A,F
03F9:  RRF    79,F
03FA:  RRF    78,F
03FB:  RRF    77,F
03FC:  DECFSZ 4F,F
03FD:  GOTO   3F4
03FE:  BTFSS  53.7
03FF:  GOTO   40B
0400:  COMF   77,F
0401:  COMF   78,F
0402:  COMF   79,F
0403:  COMF   7A,F
0404:  INCF   77,F
0405:  BTFSC  03.2
0406:  INCF   78,F
0407:  BTFSC  03.2
0408:  INCF   79,F
0409:  BTFSC  03.2
040A:  INCF   7A,F
040B:  MOVF   7A,W
040C:  MOVWF  45
040D:  MOVF   79,W
040E:  MOVWF  44
040F:  MOVF   78,W
0410:  MOVWF  43
0411:  MOVF   77,W
0412:  MOVWF  42
0413:  BTFSS  45.7
0414:  GOTO   422
0415:  DECF   47,F
0416:  BSF    47.5
0417:  COMF   42,F
0418:  COMF   43,F
0419:  COMF   44,F
041A:  COMF   45,F
041B:  INCF   42,F
041C:  BTFSC  03.2
041D:  INCF   43,F
041E:  BTFSC  03.2
041F:  INCF   44,F
0420:  BTFSC  03.2
0421:  INCF   45,F
0422:  MOVLW  3B
0423:  MOVWF  4E
0424:  MOVLW  9A
0425:  MOVWF  4D
0426:  MOVLW  CA
0427:  MOVWF  4C
0428:  CLRF   4B
0429:  MOVLW  0A
042A:  MOVWF  49
042B:  MOVF   46,W
042C:  BTFSC  03.2
042D:  INCF   47,F
042E:  BSF    03.1
042F:  MOVLW  42
0430:  MOVWF  04
0431:  BCF    03.7
0432:  MOVF   45,W
0433:  MOVWF  52
0434:  MOVF   44,W
0435:  MOVWF  51
0436:  MOVF   43,W
0437:  MOVWF  50
0438:  MOVF   42,W
0439:  MOVWF  4F
043A:  MOVF   4E,W
043B:  MOVWF  56
043C:  MOVF   4D,W
043D:  MOVWF  55
043E:  MOVF   4C,W
043F:  MOVWF  54
0440:  MOVF   4B,W
0441:  MOVWF  53
0442:  CALL   304
0443:  MOVF   78,W
0444:  MOVF   77,F
0445:  BTFSS  03.2
0446:  GOTO   45A
0447:  INCF   46,W
0448:  SUBWF  49,W
0449:  BTFSC  03.2
044A:  GOTO   45A
044B:  MOVF   47,W
044C:  BTFSC  03.2
044D:  GOTO   45C
044E:  ANDLW  0F
044F:  SUBWF  49,W
0450:  BTFSC  03.2
0451:  GOTO   454
0452:  BTFSC  03.0
0453:  GOTO   48C
0454:  BTFSC  47.7
0455:  GOTO   48C
0456:  BTFSC  47.6
0457:  GOTO   45C
0458:  MOVLW  20
0459:  GOTO   488
045A:  MOVLW  20
045B:  ANDWF  47,F
045C:  BTFSS  47.5
045D:  GOTO   46A
045E:  BCF    47.5
045F:  MOVF   46,W
0460:  BTFSS  03.2
0461:  DECF   47,F
0462:  MOVF   77,W
0463:  MOVWF  47
0464:  MOVLW  2D
0465:  MOVWF  4F
0466:  CALL   14C
0467:  MOVF   47,W
0468:  MOVWF  77
0469:  CLRF   47
046A:  MOVF   46,W
046B:  SUBWF  49,W
046C:  BTFSS  03.2
046D:  GOTO   478
046E:  MOVF   77,W
046F:  MOVWF  47
0470:  MOVLW  2E
0471:  MOVWF  4F
0472:  CALL   14C
0473:  MOVF   47,W
0474:  MOVWF  77
0475:  MOVLW  20
0476:  ANDWF  47,F
0477:  MOVLW  00
0478:  MOVLW  30
0479:  BTFSS  47.5
047A:  GOTO   488
047B:  BCF    47.5
047C:  MOVF   46,W
047D:  BTFSS  03.2
047E:  DECF   47,F
047F:  MOVF   77,W
0480:  MOVWF  47
0481:  MOVLW  2D
0482:  MOVWF  4F
0483:  CALL   14C
0484:  MOVF   47,W
0485:  MOVWF  77
0486:  CLRF   47
0487:  MOVLW  30
0488:  ADDWF  77,F
0489:  MOVF   77,W
048A:  MOVWF  4F
048B:  CALL   14C
048C:  BCF    03.1
048D:  MOVF   4E,W
048E:  MOVWF  52
048F:  MOVF   4D,W
0490:  MOVWF  51
0491:  MOVF   4C,W
0492:  MOVWF  50
0493:  MOVF   4B,W
0494:  MOVWF  4F
0495:  CLRF   56
0496:  CLRF   55
0497:  CLRF   54
0498:  MOVLW  0A
0499:  MOVWF  53
049A:  CALL   304
049B:  MOVF   7A,W
049C:  MOVWF  4E
049D:  MOVF   79,W
049E:  MOVWF  4D
049F:  MOVF   78,W
04A0:  MOVWF  4C
04A1:  MOVF   77,W
04A2:  MOVWF  4B
04A3:  DECFSZ 49,F
04A4:  GOTO   42E
04A5:  RETURN
04A6:  MOVF   43,W
04A7:  MOVWF  4A
04A8:  MOVF   47,W
04A9:  XORWF  4A,F
04AA:  BTFSS  4A.7
04AB:  GOTO   4B1
04AC:  BCF    03.2
04AD:  BCF    03.0
04AE:  BTFSC  43.7
04AF:  BSF    03.0
04B0:  GOTO   4E4
04B1:  MOVF   43,W
04B2:  MOVWF  4A
04B3:  MOVF   46,W
04B4:  MOVWF  4B
04B5:  MOVF   42,W
04B6:  SUBWF  4B,F
04B7:  BTFSC  03.2
04B8:  GOTO   4BF
04B9:  BTFSS  4A.7
04BA:  GOTO   4E4
04BB:  MOVF   03,W
04BC:  XORLW  01
04BD:  MOVWF  03
04BE:  GOTO   4E4
04BF:  MOVF   47,W
04C0:  MOVWF  4B
04C1:  MOVF   43,W
04C2:  SUBWF  4B,F
04C3:  BTFSC  03.2
04C4:  GOTO   4CB
04C5:  BTFSS  4A.7
04C6:  GOTO   4E4
04C7:  MOVF   03,W
04C8:  XORLW  01
04C9:  MOVWF  03
04CA:  GOTO   4E4
04CB:  MOVF   48,W
04CC:  MOVWF  4B
04CD:  MOVF   44,W
04CE:  SUBWF  4B,F
04CF:  BTFSC  03.2
04D0:  GOTO   4D7
04D1:  BTFSS  4A.7
04D2:  GOTO   4E4
04D3:  MOVF   03,W
04D4:  XORLW  01
04D5:  MOVWF  03
04D6:  GOTO   4E4
04D7:  MOVF   49,W
04D8:  MOVWF  4B
04D9:  MOVF   45,W
04DA:  SUBWF  4B,F
04DB:  BTFSC  03.2
04DC:  GOTO   4E3
04DD:  BTFSS  4A.7
04DE:  GOTO   4E4
04DF:  MOVF   03,W
04E0:  XORLW  01
04E1:  MOVWF  03
04E2:  GOTO   4E4
04E3:  BCF    03.0
04E4:  RETURN
*
0658:  MOVLW  8E
0659:  MOVWF  77
065A:  MOVF   43,W
065B:  MOVWF  78
065C:  MOVF   42,W
065D:  MOVWF  79
065E:  CLRF   7A
065F:  BTFSS  43.7
0660:  GOTO   666
0661:  COMF   78,F
0662:  COMF   79,F
0663:  INCF   79,F
0664:  BTFSC  03.2
0665:  INCF   78,F
0666:  MOVF   78,F
0667:  BTFSS  03.2
0668:  GOTO   673
0669:  MOVF   79,W
066A:  MOVWF  78
066B:  CLRF   79
066C:  MOVLW  08
066D:  SUBWF  77,F
066E:  MOVF   78,F
066F:  BTFSS  03.2
0670:  GOTO   673
0671:  CLRF   77
0672:  GOTO   67C
0673:  BCF    03.0
0674:  BTFSC  78.7
0675:  GOTO   67A
0676:  RLF    79,F
0677:  RLF    78,F
0678:  DECF   77,F
0679:  GOTO   673
067A:  BTFSS  43.7
067B:  BCF    78.7
067C:  RETURN
067D:  MOVF   46,W
067E:  BTFSC  03.2
067F:  GOTO   742
0680:  MOVWF  52
0681:  MOVF   4A,W
0682:  BTFSC  03.2
0683:  GOTO   742
0684:  SUBWF  52,F
0685:  BTFSS  03.0
0686:  GOTO   68C
0687:  MOVLW  7F
0688:  ADDWF  52,F
0689:  BTFSC  03.0
068A:  GOTO   742
068B:  GOTO   692
068C:  MOVLW  81
068D:  SUBWF  52,F
068E:  BTFSS  03.0
068F:  GOTO   742
0690:  BTFSC  03.2
0691:  GOTO   742
0692:  MOVF   52,W
0693:  MOVWF  77
0694:  CLRF   78
0695:  CLRF   79
0696:  CLRF   7A
0697:  CLRF   51
0698:  MOVF   47,W
0699:  MOVWF  50
069A:  BSF    50.7
069B:  MOVF   48,W
069C:  MOVWF  4F
069D:  MOVF   49,W
069E:  MOVWF  4E
069F:  MOVLW  19
06A0:  MOVWF  52
06A1:  MOVF   4D,W
06A2:  SUBWF  4E,F
06A3:  BTFSC  03.0
06A4:  GOTO   6B5
06A5:  MOVLW  01
06A6:  SUBWF  4F,F
06A7:  BTFSC  03.0
06A8:  GOTO   6B5
06A9:  SUBWF  50,F
06AA:  BTFSC  03.0
06AB:  GOTO   6B5
06AC:  SUBWF  51,F
06AD:  BTFSC  03.0
06AE:  GOTO   6B5
06AF:  INCF   51,F
06B0:  INCF   50,F
06B1:  INCF   4F,F
06B2:  MOVF   4D,W
06B3:  ADDWF  4E,F
06B4:  GOTO   6E7
06B5:  MOVF   4C,W
06B6:  SUBWF  4F,F
06B7:  BTFSC  03.0
06B8:  GOTO   6D0
06B9:  MOVLW  01
06BA:  SUBWF  50,F
06BB:  BTFSC  03.0
06BC:  GOTO   6D0
06BD:  SUBWF  51,F
06BE:  BTFSC  03.0
06BF:  GOTO   6D0
06C0:  INCF   51,F
06C1:  INCF   50,F
06C2:  MOVF   4C,W
06C3:  ADDWF  4F,F
06C4:  MOVF   4D,W
06C5:  ADDWF  4E,F
06C6:  BTFSS  03.0
06C7:  GOTO   6E7
06C8:  INCF   4F,F
06C9:  BTFSS  03.2
06CA:  GOTO   6E7
06CB:  INCF   50,F
06CC:  BTFSS  03.2
06CD:  GOTO   6E7
06CE:  INCF   51,F
06CF:  GOTO   6E7
06D0:  MOVF   4B,W
06D1:  IORLW  80
06D2:  SUBWF  50,F
06D3:  BTFSC  03.0
06D4:  GOTO   6E6
06D5:  MOVLW  01
06D6:  SUBWF  51,F
06D7:  BTFSC  03.0
06D8:  GOTO   6E6
06D9:  INCF   51,F
06DA:  MOVF   4B,W
06DB:  IORLW  80
06DC:  ADDWF  50,F
06DD:  MOVF   4C,W
06DE:  ADDWF  4F,F
06DF:  BTFSS  03.0
06E0:  GOTO   6C4
06E1:  INCF   50,F
06E2:  BTFSS  03.2
06E3:  GOTO   6C4
06E4:  INCF   51,F
06E5:  GOTO   6C4
06E6:  BSF    7A.0
06E7:  DECFSZ 52,F
06E8:  GOTO   6EA
06E9:  GOTO   6F5
06EA:  BCF    03.0
06EB:  RLF    4E,F
06EC:  RLF    4F,F
06ED:  RLF    50,F
06EE:  RLF    51,F
06EF:  BCF    03.0
06F0:  RLF    7A,F
06F1:  RLF    79,F
06F2:  RLF    78,F
06F3:  RLF    53,F
06F4:  GOTO   6A1
06F5:  BTFSS  53.0
06F6:  GOTO   6FD
06F7:  BCF    03.0
06F8:  RRF    78,F
06F9:  RRF    79,F
06FA:  RRF    7A,F
06FB:  RRF    53,F
06FC:  GOTO   700
06FD:  DECF   77,F
06FE:  BTFSC  03.2
06FF:  GOTO   742
0700:  BTFSC  53.7
0701:  GOTO   729
0702:  BCF    03.0
0703:  RLF    4E,F
0704:  RLF    4F,F
0705:  RLF    50,F
0706:  RLF    51,F
0707:  MOVF   4D,W
0708:  SUBWF  4E,F
0709:  BTFSC  03.0
070A:  GOTO   715
070B:  MOVLW  01
070C:  SUBWF  4F,F
070D:  BTFSC  03.0
070E:  GOTO   715
070F:  SUBWF  50,F
0710:  BTFSC  03.0
0711:  GOTO   715
0712:  SUBWF  51,F
0713:  BTFSS  03.0
0714:  GOTO   738
0715:  MOVF   4C,W
0716:  SUBWF  4F,F
0717:  BTFSC  03.0
0718:  GOTO   720
0719:  MOVLW  01
071A:  SUBWF  50,F
071B:  BTFSC  03.0
071C:  GOTO   720
071D:  SUBWF  51,F
071E:  BTFSS  03.0
071F:  GOTO   738
0720:  MOVF   4B,W
0721:  IORLW  80
0722:  SUBWF  50,F
0723:  BTFSC  03.0
0724:  GOTO   729
0725:  MOVLW  01
0726:  SUBWF  51,F
0727:  BTFSS  03.0
0728:  GOTO   738
0729:  INCF   7A,F
072A:  BTFSS  03.2
072B:  GOTO   738
072C:  INCF   79,F
072D:  BTFSS  03.2
072E:  GOTO   738
072F:  INCF   78,F
0730:  BTFSS  03.2
0731:  GOTO   738
0732:  INCF   77,F
0733:  BTFSC  03.2
0734:  GOTO   742
0735:  RRF    78,F
0736:  RRF    79,F
0737:  RRF    7A,F
0738:  MOVF   47,W
0739:  MOVWF  52
073A:  MOVF   4B,W
073B:  XORWF  52,F
073C:  BTFSS  52.7
073D:  GOTO   740
073E:  BSF    78.7
073F:  GOTO   746
0740:  BCF    78.7
0741:  GOTO   746
0742:  CLRF   77
0743:  CLRF   78
0744:  CLRF   79
0745:  CLRF   7A
0746:  RETURN
....................  
.................... #list 
....................  
.................... #fuses HS,NOWDT,NOPROTECT,NOLVP                        
.................... #use delay(clock = 8MHz)                     
*
0030:  MOVLW  50
0031:  MOVWF  04
0032:  BCF    03.7
0033:  MOVF   00,W
0034:  BTFSC  03.2
0035:  GOTO   043
0036:  MOVLW  02
0037:  MOVWF  78
0038:  CLRF   77
0039:  DECFSZ 77,F
003A:  GOTO   039
003B:  DECFSZ 78,F
003C:  GOTO   038
003D:  MOVLW  97
003E:  MOVWF  77
003F:  DECFSZ 77,F
0040:  GOTO   03F
0041:  DECFSZ 00,F
0042:  GOTO   036
0043:  RETURN
*
05BF:  MOVLW  08
05C0:  SUBWF  45,F
05C1:  BTFSS  03.0
05C2:  GOTO   5CF
05C3:  MOVLW  45
05C4:  MOVWF  04
05C5:  BCF    03.7
05C6:  BCF    03.0
05C7:  RRF    00,F
05C8:  MOVF   00,W
05C9:  BTFSC  03.2
05CA:  GOTO   5CF
05CB:  GOTO   5CD
05CC:  NOP
05CD:  DECFSZ 00,F
05CE:  GOTO   5CC
05CF:  RETURN
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
00A9:  BSF    08.3
....................    output_float(LCD_DATA5); 
00AA:  BSF    08.4
....................    output_float(LCD_DATA6); 
00AB:  BSF    08.5
....................    output_float(LCD_DATA7); 
00AC:  BSF    08.6
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00AD:  BCF    03.5
00AE:  BSF    08.1
00AF:  BSF    03.5
00B0:  BCF    08.1
....................    delay_cycles(1); 
00B1:  NOP
....................    lcd_output_enable(1); 
00B2:  BCF    03.5
00B3:  BSF    08.2
00B4:  BSF    03.5
00B5:  BCF    08.2
....................    delay_cycles(1); 
00B6:  NOP
....................    high = lcd_read_nibble(); 
00B7:  BCF    03.5
00B8:  CALL   070
00B9:  MOVF   78,W
00BA:  MOVWF  57
....................        
....................    lcd_output_enable(0); 
00BB:  BCF    08.2
00BC:  BSF    03.5
00BD:  BCF    08.2
....................    delay_cycles(1); 
00BE:  NOP
....................    lcd_output_enable(1); 
00BF:  BCF    03.5
00C0:  BSF    08.2
00C1:  BSF    03.5
00C2:  BCF    08.2
....................    delay_us(1); 
00C3:  GOTO   0C4
....................    low = lcd_read_nibble(); 
00C4:  BCF    03.5
00C5:  CALL   070
00C6:  MOVF   78,W
00C7:  MOVWF  56
....................        
....................    lcd_output_enable(0); 
00C8:  BCF    08.2
00C9:  BSF    03.5
00CA:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00CB:  BCF    08.3
....................    output_drive(LCD_DATA5); 
00CC:  BCF    08.4
....................    output_drive(LCD_DATA6); 
00CD:  BCF    08.5
....................    output_drive(LCD_DATA7); 
00CE:  BCF    08.6
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00CF:  BCF    03.5
00D0:  SWAPF  57,W
00D1:  MOVWF  77
00D2:  MOVLW  F0
00D3:  ANDWF  77,F
00D4:  MOVF   77,W
00D5:  IORWF  56,W
00D6:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
0070:  CLRF   58
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
0071:  BSF    03.5
0072:  BSF    08.3
0073:  MOVLW  00
0074:  BCF    03.5
0075:  BTFSC  08.3
0076:  MOVLW  01
0077:  IORWF  58,F
....................    n |= input(LCD_DATA5) << 1; 
0078:  BSF    03.5
0079:  BSF    08.4
007A:  MOVLW  00
007B:  BCF    03.5
007C:  BTFSC  08.4
007D:  MOVLW  01
007E:  MOVWF  77
007F:  BCF    03.0
0080:  RLF    77,F
0081:  MOVF   77,W
0082:  IORWF  58,F
....................    n |= input(LCD_DATA6) << 2; 
0083:  BSF    03.5
0084:  BSF    08.5
0085:  MOVLW  00
0086:  BCF    03.5
0087:  BTFSC  08.5
0088:  MOVLW  01
0089:  MOVWF  77
008A:  RLF    77,F
008B:  RLF    77,F
008C:  MOVLW  FC
008D:  ANDWF  77,F
008E:  MOVF   77,W
008F:  IORWF  58,F
....................    n |= input(LCD_DATA7) << 3; 
0090:  BSF    03.5
0091:  BSF    08.6
0092:  MOVLW  00
0093:  BCF    03.5
0094:  BTFSC  08.6
0095:  MOVLW  01
0096:  MOVWF  77
0097:  RLF    77,F
0098:  RLF    77,F
0099:  RLF    77,F
009A:  MOVLW  F8
009B:  ANDWF  77,F
009C:  MOVF   77,W
009D:  IORWF  58,F
....................     
....................    return(n); 
009E:  MOVF   58,W
009F:  MOVWF  78
....................   #else 
00A0:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0044:  BTFSC  57.0
0045:  GOTO   048
0046:  BCF    08.3
0047:  GOTO   049
0048:  BSF    08.3
0049:  BSF    03.5
004A:  BCF    08.3
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
004B:  BCF    03.5
004C:  BTFSC  57.1
004D:  GOTO   050
004E:  BCF    08.4
004F:  GOTO   051
0050:  BSF    08.4
0051:  BSF    03.5
0052:  BCF    08.4
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
0053:  BCF    03.5
0054:  BTFSC  57.2
0055:  GOTO   058
0056:  BCF    08.5
0057:  GOTO   059
0058:  BSF    08.5
0059:  BSF    03.5
005A:  BCF    08.5
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
005B:  BCF    03.5
005C:  BTFSC  57.3
005D:  GOTO   060
005E:  BCF    08.6
005F:  GOTO   061
0060:  BSF    08.6
0061:  BSF    03.5
0062:  BCF    08.6
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
0063:  NOP
....................    lcd_output_enable(1); 
0064:  BCF    03.5
0065:  BSF    08.2
0066:  BSF    03.5
0067:  BCF    08.2
....................    delay_us(2); 
0068:  GOTO   069
0069:  GOTO   06A
....................    lcd_output_enable(0); 
006A:  BCF    03.5
006B:  BCF    08.2
006C:  BSF    03.5
006D:  BCF    08.2
006E:  BCF    03.5
006F:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
00A1:  BSF    03.5
00A2:  BCF    08.2
....................    lcd_rs_tris(); 
00A3:  BCF    08.0
....................    lcd_rw_tris(); 
00A4:  BCF    08.1
....................   #endif 
....................  
....................    lcd_output_rs(0); 
00A5:  BCF    03.5
00A6:  BCF    08.0
00A7:  BSF    03.5
00A8:  BCF    08.0
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00D7:  MOVF   78,W
00D8:  MOVWF  56
00D9:  BTFSS  56.7
00DA:  GOTO   0DD
00DB:  BSF    03.5
00DC:  GOTO   0A9
....................    lcd_output_rs(address); 
00DD:  MOVF   54,F
00DE:  BTFSS  03.2
00DF:  GOTO   0E2
00E0:  BCF    08.0
00E1:  GOTO   0E3
00E2:  BSF    08.0
00E3:  BSF    03.5
00E4:  BCF    08.0
....................    delay_cycles(1); 
00E5:  NOP
....................    lcd_output_rw(0); 
00E6:  BCF    03.5
00E7:  BCF    08.1
00E8:  BSF    03.5
00E9:  BCF    08.1
....................    delay_cycles(1); 
00EA:  NOP
....................    lcd_output_enable(0); 
00EB:  BCF    03.5
00EC:  BCF    08.2
00ED:  BSF    03.5
00EE:  BCF    08.2
....................    lcd_send_nibble(n >> 4); 
00EF:  BCF    03.5
00F0:  SWAPF  55,W
00F1:  MOVWF  56
00F2:  MOVLW  0F
00F3:  ANDWF  56,F
00F4:  MOVF   56,W
00F5:  MOVWF  57
00F6:  CALL   044
....................    lcd_send_nibble(n & 0xf); 
00F7:  MOVF   55,W
00F8:  ANDLW  0F
00F9:  MOVWF  56
00FA:  MOVWF  57
00FB:  CALL   044
00FC:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00FD:  BSF    03.5
00FE:  BCF    08.3
....................    output_drive(LCD_DATA5); 
00FF:  BCF    08.4
....................    output_drive(LCD_DATA6); 
0100:  BCF    08.5
....................    output_drive(LCD_DATA7); 
0101:  BCF    08.6
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
0102:  BCF    08.2
....................    lcd_rs_tris(); 
0103:  BCF    08.0
....................    lcd_rw_tris(); 
0104:  BCF    08.1
....................  #endif 
....................  
....................    lcd_output_rs(0); 
0105:  BCF    03.5
0106:  BCF    08.0
0107:  BSF    03.5
0108:  BCF    08.0
....................    lcd_output_rw(0); 
0109:  BCF    03.5
010A:  BCF    08.1
010B:  BSF    03.5
010C:  BCF    08.1
....................    lcd_output_enable(0); 
010D:  BCF    03.5
010E:  BCF    08.2
010F:  BSF    03.5
0110:  BCF    08.2
....................      
....................    delay_ms(15); 
0111:  MOVLW  0F
0112:  BCF    03.5
0113:  MOVWF  50
0114:  CALL   030
....................    for(i=1;i<=3;++i) 
0115:  MOVLW  01
0116:  MOVWF  42
0117:  MOVF   42,W
0118:  SUBLW  03
0119:  BTFSS  03.0
011A:  GOTO   123
....................    { 
....................        lcd_send_nibble(3); 
011B:  MOVLW  03
011C:  MOVWF  57
011D:  CALL   044
....................        delay_ms(5); 
011E:  MOVLW  05
011F:  MOVWF  50
0120:  CALL   030
0121:  INCF   42,F
0122:  GOTO   117
....................    } 
....................     
....................    lcd_send_nibble(2); 
0123:  MOVLW  02
0124:  MOVWF  57
0125:  CALL   044
....................    delay_ms(5); 
0126:  MOVLW  05
0127:  MOVWF  50
0128:  CALL   030
....................    for(i=0;i<=3;++i) 
0129:  CLRF   42
012A:  MOVF   42,W
012B:  SUBLW  03
012C:  BTFSS  03.0
012D:  GOTO   137
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
012E:  MOVF   42,W
012F:  CALL   004
0130:  MOVWF  43
0131:  CLRF   54
0132:  MOVF   43,W
0133:  MOVWF  55
0134:  CALL   0A1
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0135:  INCF   42,F
0136:  GOTO   12A
0137:  BSF    0A.3
0138:  BCF    0A.4
0139:  GOTO   279 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
013A:  DECFSZ 51,W
013B:  GOTO   13D
013C:  GOTO   140
....................       address=LCD_LINE_TWO; 
013D:  MOVLW  40
013E:  MOVWF  52
013F:  GOTO   141
....................    else 
....................       address=0; 
0140:  CLRF   52
....................       
....................    address+=x-1; 
0141:  MOVLW  01
0142:  SUBWF  50,W
0143:  ADDWF  52,F
....................    lcd_send_byte(0,0x80|address); 
0144:  MOVF   52,W
0145:  IORLW  80
0146:  MOVWF  53
0147:  CLRF   54
0148:  MOVF   53,W
0149:  MOVWF  55
014A:  CALL   0A1
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
014B:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
014C:  MOVF   4F,W
014D:  XORLW  07
014E:  BTFSC  03.2
014F:  GOTO   15A
0150:  XORLW  0B
0151:  BTFSC  03.2
0152:  GOTO   15F
0153:  XORLW  06
0154:  BTFSC  03.2
0155:  GOTO   167
0156:  XORLW  02
0157:  BTFSC  03.2
0158:  GOTO   16D
0159:  GOTO   172
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
015A:  MOVLW  01
015B:  MOVWF  50
015C:  MOVWF  51
015D:  CALL   13A
015E:  GOTO   177
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
015F:  CLRF   54
0160:  MOVLW  01
0161:  MOVWF  55
0162:  CALL   0A1
....................                      delay_ms(2); 
0163:  MOVLW  02
0164:  MOVWF  50
0165:  CALL   030
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0166:  GOTO   177
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0167:  MOVLW  01
0168:  MOVWF  50
0169:  MOVLW  02
016A:  MOVWF  51
016B:  CALL   13A
016C:  GOTO   177
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
016D:  CLRF   54
016E:  MOVLW  10
016F:  MOVWF  55
0170:  CALL   0A1
0171:  GOTO   177
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0172:  MOVLW  01
0173:  MOVWF  54
0174:  MOVF   4F,W
0175:  MOVWF  55
0176:  CALL   0A1
....................      #endif 
....................    } 
0177:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
....................                                                           
.................... //#FUSES FRC                                 
....................                                                                                                                                  
.................... //#use delay(restart_wdt)                                                                   
....................                                         
....................                                    
....................                                  
.................... //#include <lcd.c>                                                         
....................                                
....................                                                                   
.................... #define DS18B20_PIN PIN_B1                         // DS18B20 Data pin is connected to pin RB1 
.................... #define DS18B20_PIN PIN_B1                         // DS18B20 Data pin is connected to pin RB1 
.................... #define DS18B20_PIN1 PIN_B2                         // DS18B20 Data pin is connected to pin RB1 
....................                            
.................... #define Down                        PIN_B4                      // Temperature down button 
.................... #define Up                          PIN_B3                     // Temperature up button                                      
.................... #define PWR                         PIN_B5                    // PWR pin to turn on a water pump                                 
.................... #define LCD_BACKLIGHT_ON            PIN_D7                   // Pin to turn on LCD backlight    
....................                                                                          
....................  
....................   
.................... //Min and Max set temperatures 
.................... float min = 0; 
.................... float max = 100;                                   
....................  
....................   
.................... signed int16 raw_temp; 
.................... signed int16 raw_temp1;     
....................                                                                               
.................... float ButtonCounter = 10;                    // Starting point temperature set                     
....................                                             
.................... float temp;                                           
.................... float temp1; 
.................... float Old_temp; 
.................... int On_flag;    
.................... int i;                                                                            
....................                                
....................                            
.................... // DS18B20 sensor functions for full run                                                        
.................... int1 ds18b20_start(){                              
....................   output_low(DS18B20_PIN);                         // Send reset pulse to the DS18B20 sensor 
*
05D0:  BSF    03.5
05D1:  BCF    06.1
05D2:  BCF    03.5
05D3:  BCF    06.1
....................   output_drive(DS18B20_PIN);                       // Configure DS18B20_PIN pin as output 
05D4:  BSF    03.5
05D5:  BCF    06.1
....................   delay_us(500);                                   // Wait 500 us  
05D6:  MOVLW  02
05D7:  BCF    03.5
05D8:  MOVWF  44
05D9:  MOVLW  F8
05DA:  MOVWF  45
05DB:  CALL   5BF
05DC:  DECFSZ 44,F
05DD:  GOTO   5D9
....................   output_float(DS18B20_PIN);                       // Configure DS18B20_PIN pin as input 
05DE:  BSF    03.5
05DF:  BSF    06.1
....................   delay_us(100);                                   //wait to read the DS18B20 sensor response 
05E0:  MOVLW  42
05E1:  MOVWF  77
05E2:  DECFSZ 77,F
05E3:  GOTO   5E2
05E4:  NOP
....................   if (!input(DS18B20_PIN)) {                                                                  
05E5:  BSF    06.1
05E6:  BCF    03.5
05E7:  BTFSC  06.1
05E8:  GOTO   5F3
....................     delay_us(400);                                 // Wait 400 us   
05E9:  MOVLW  02
05EA:  MOVWF  44
05EB:  MOVLW  C6
05EC:  MOVWF  45
05ED:  CALL   5BF
05EE:  DECFSZ 44,F
05EF:  GOTO   5EB
....................     return TRUE;                                   // DS18B20 sensor is present 
05F0:  MOVLW  01
05F1:  MOVWF  78
05F2:  GOTO   5F5
....................   }                               
....................   return FALSE;  
05F3:  MOVLW  00
05F4:  MOVWF  78
05F5:  RETURN
.................... }                                       
....................                                                        
....................                                                                                                                 
.................... void ds18b20_write_bit(int1 value){                  
....................   output_low(DS18B20_PIN);                                                                                                                        
*
060B:  BSF    03.5
060C:  BCF    06.1
060D:  BCF    03.5
060E:  BCF    06.1
....................   output_drive(DS18B20_PIN);                       // Configure DS18B20_PIN pin as output 
060F:  BSF    03.5
0610:  BCF    06.1
....................   delay_us(2);                                     // Wait 2 us 
0611:  GOTO   612
0612:  GOTO   613
....................   output_bit(DS18B20_PIN, value);                         
0613:  BCF    03.5
0614:  MOVF   47,F
0615:  BTFSS  03.2
0616:  GOTO   619
0617:  BCF    06.1
0618:  GOTO   61A
0619:  BSF    06.1
061A:  BSF    03.5
061B:  BCF    06.1
....................   delay_us(80);                                    // Wait 80 us 
061C:  MOVLW  34
061D:  MOVWF  77
061E:  DECFSZ 77,F
061F:  GOTO   61E
0620:  GOTO   621
0621:  NOP
....................   output_float(DS18B20_PIN);                       // Configure DS18B20_PIN pin as input 
0622:  BSF    06.1
....................   delay_us(2);                                     // Wait 2 us                                                                      
0623:  GOTO   624
0624:  GOTO   625
.................... }                      
....................                                                  
....................   
.................... void ds18b20_write_byte(int8 value){                
....................   int8 i;                 
....................   for(i = 0; i < 8; i++) 
*
05F6:  CLRF   45
05F7:  MOVF   45,W
05F8:  SUBLW  07
05F9:  BTFSS  03.0
05FA:  GOTO   628
....................     ds18b20_write_bit(bit_test(value, i)); 
05FB:  MOVF   44,W
05FC:  MOVWF  77
05FD:  MOVF   45,W
05FE:  MOVWF  78
05FF:  BTFSC  03.2
0600:  GOTO   605
0601:  BCF    03.0
0602:  RRF    77,F
0603:  DECFSZ 78,F
0604:  GOTO   601
0605:  MOVLW  00
0606:  BTFSC  77.0
0607:  MOVLW  01
0608:  MOVWF  46
0609:  MOVF   46,W
060A:  MOVWF  47
*
0625:  BCF    03.5
0626:  INCF   45,F
0627:  GOTO   5F7
0628:  RETURN
.................... } 
....................          
....................                                                           
.................... int1 ds18b20_read_bit(void) {                           
....................   int1 value;        
....................   output_low(DS18B20_PIN); 
*
062F:  BSF    03.5
0630:  BCF    06.1
0631:  BCF    03.5
0632:  BCF    06.1
....................   output_drive(DS18B20_PIN);                       // Configure DS18B20_PIN pin as output 
0633:  BSF    03.5
0634:  BCF    06.1
....................   delay_us(2);                                                                             
0635:  GOTO   636
0636:  GOTO   637
....................   output_float(DS18B20_PIN);                       // Configure DS18B20_PIN pin as input 
0637:  BSF    06.1
....................   delay_us(5);                                     // Wait 5 us 
0638:  MOVLW  02
0639:  MOVWF  77
063A:  DECFSZ 77,F
063B:  GOTO   63A
063C:  GOTO   63D
063D:  NOP
....................   value = input(DS18B20_PIN); 
063E:  BSF    06.1
063F:  BCF    03.5
0640:  BCF    4A.0
0641:  BTFSC  06.1
0642:  BSF    4A.0
....................   delay_us(100);                                   // Wait 100 us 
0643:  MOVLW  42
0644:  MOVWF  77
0645:  DECFSZ 77,F
0646:  GOTO   645
0647:  NOP
....................   return value;            
0648:  MOVLW  00
0649:  BTFSC  4A.0
064A:  MOVLW  01
064B:  MOVWF  78
.................... } 
....................                            
....................                          
.................... int8 ds18b20_read_byte(void) { 
*
0629:  CLRF   49
....................   int8 i, value = 0; 
....................   for(i = 0; i  < 8; i++) 
062A:  CLRF   48
062B:  MOVF   48,W
062C:  SUBLW  07
062D:  BTFSS  03.0
062E:  GOTO   655
....................     shift_right(&value, 1, ds18b20_read_bit()); 
*
064C:  MOVF   78,F
064D:  BTFSS  03.2
064E:  GOTO   651
064F:  BCF    03.0
0650:  GOTO   652
0651:  BSF    03.0
0652:  RRF    49,F
0653:  INCF   48,F
0654:  GOTO   62B
....................   return value;                                                     
0655:  MOVF   49,W
0656:  MOVWF  78
0657:  RETURN
.................... }                    
....................    
....................   
.................... int1 ds18b20_read(int16 *raw_temp_value) { 
....................   if (!ds18b20_start())                              // Send start pulse 
*
0803:  BCF    0A.3
0804:  CALL   5D0
0805:  BSF    0A.3
0806:  MOVF   78,F
0807:  BTFSS  03.2
0808:  GOTO   00C
....................     return FALSE; 
0809:  MOVLW  00
080A:  MOVWF  78
080B:  GOTO   06A
....................   ds18b20_write_byte(0xCC);                          // Send skip ROM command 
080C:  MOVLW  CC
080D:  MOVWF  44
080E:  BCF    0A.3
080F:  CALL   5F6
0810:  BSF    0A.3
....................   ds18b20_write_byte(0x44);                          // Send start conversion command 
0811:  MOVLW  44
0812:  MOVWF  44
0813:  BCF    0A.3
0814:  CALL   5F6
0815:  BSF    0A.3
....................   while(ds18b20_read_byte() == 0);                   // Wait for conversion complete 
0816:  BCF    0A.3
0817:  CALL   629
0818:  BSF    0A.3
0819:  MOVF   78,F
081A:  BTFSC  03.2
081B:  GOTO   016
....................   if (!ds18b20_start())                              // Send start pulse 
081C:  BCF    0A.3
081D:  CALL   5D0
081E:  BSF    0A.3
081F:  MOVF   78,F
0820:  BTFSS  03.2
0821:  GOTO   025
....................     return FALSE;                                    // Return 0 if error 
0822:  MOVLW  00
0823:  MOVWF  78
0824:  GOTO   06A
....................   ds18b20_write_byte(0xCC);                          // Send skip ROM command 
0825:  MOVLW  CC
0826:  MOVWF  44
0827:  BCF    0A.3
0828:  CALL   5F6
0829:  BSF    0A.3
....................   ds18b20_write_byte(0xBE);                          // Send read command 
082A:  MOVLW  BE
082B:  MOVWF  44
082C:  BCF    0A.3
082D:  CALL   5F6
082E:  BSF    0A.3
....................   *raw_temp_value = ds18b20_read_byte();             // Read temperature LSB byte and store it on raw_temp_value LSB byte 
082F:  MOVF   43,W
0830:  MOVWF  7A
0831:  MOVF   42,W
0832:  MOVWF  44
0833:  MOVF   43,W
0834:  MOVWF  45
0835:  BCF    0A.3
0836:  CALL   629
0837:  BSF    0A.3
0838:  MOVF   44,W
0839:  MOVWF  04
083A:  BCF    03.7
083B:  BTFSC  45.0
083C:  BSF    03.7
083D:  INCF   04,F
083E:  CLRF   00
083F:  DECF   04,F
0840:  MOVF   78,W
0841:  MOVWF  00
....................   *raw_temp_value |= (int16)(ds18b20_read_byte()) << 8;     // Read temperature MSB byte and store it on raw_temp_value MSB byte 
0842:  MOVF   43,W
0843:  MOVWF  7A
0844:  MOVF   42,W
0845:  MOVWF  44
0846:  MOVF   43,W
0847:  MOVWF  45
0848:  MOVF   42,W
0849:  MOVWF  04
084A:  BCF    03.7
084B:  BTFSC  43.0
084C:  BSF    03.7
084D:  INCF   04,F
084E:  MOVF   00,W
084F:  MOVWF  47
0850:  DECF   04,F
0851:  MOVF   00,W
0852:  MOVWF  46
0853:  BCF    0A.3
0854:  CALL   629
0855:  BSF    0A.3
0856:  CLRF   49
0857:  MOVLW  00
0858:  IORWF  46,W
0859:  MOVWF  77
085A:  MOVF   78,W
085B:  IORWF  47,W
085C:  MOVWF  7A
085D:  MOVF   44,W
085E:  MOVWF  04
085F:  BCF    03.7
0860:  BTFSC  45.0
0861:  BSF    03.7
0862:  INCF   04,F
0863:  MOVF   7A,W
0864:  MOVWF  00
0865:  DECF   04,F
0866:  MOVF   77,W
0867:  MOVWF  00
....................   return TRUE;                                              // OK --> return 1 
0868:  MOVLW  01
0869:  MOVWF  78
.................... }          
....................        
....................        
....................      int1 ds18b20_start1(){ 
....................   output_low(DS18B20_PIN1);                        // Send reset pulse to the DS18B20 sensor 
*
0747:  BSF    03.5
0748:  BCF    06.2
0749:  BCF    03.5
074A:  BCF    06.2
....................   output_drive(DS18B20_PIN1);                      // Configure DS18B20_PIN pin as output 
074B:  BSF    03.5
074C:  BCF    06.2
....................   delay_us(500);                                   // Wait 500 us 
074D:  MOVLW  02
074E:  BCF    03.5
074F:  MOVWF  44
0750:  MOVLW  F8
0751:  MOVWF  45
0752:  CALL   5BF
0753:  DECFSZ 44,F
0754:  GOTO   750
....................   output_float(DS18B20_PIN1);                      // Configure DS18B20_PIN pin as input 
0755:  BSF    03.5
0756:  BSF    06.2
....................   delay_us(100);                                   // wait to read the DS18B20 sensor response 
0757:  MOVLW  42
0758:  MOVWF  77
0759:  DECFSZ 77,F
075A:  GOTO   759
075B:  NOP
....................   if (!input(DS18B20_PIN1)) {                                                                            
075C:  BSF    06.2
075D:  BCF    03.5
075E:  BTFSC  06.2
075F:  GOTO   76A
....................     delay_us(400);                                 // Wait 400 us   
0760:  MOVLW  02
0761:  MOVWF  44
0762:  MOVLW  C6
0763:  MOVWF  45
0764:  CALL   5BF
0765:  DECFSZ 44,F
0766:  GOTO   762
....................                        
....................     return TRUE;                                   // DS18B20 sensor is present 
0767:  MOVLW  01
0768:  MOVWF  78
0769:  GOTO   770
....................   }            
....................     output_high(DS18B20_PIN1);     
076A:  BSF    03.5
076B:  BCF    06.2
076C:  BCF    03.5
076D:  BSF    06.2
....................     return FALSE;  
076E:  MOVLW  00
076F:  MOVWF  78
0770:  RETURN
.................... }                                                      
....................         
....................       
.................... void ds18b20_write_bit1(int1 value1){ 
....................   output_low(DS18B20_PIN1); 
*
0786:  BSF    03.5
0787:  BCF    06.2
0788:  BCF    03.5
0789:  BCF    06.2
....................   output_drive(DS18B20_PIN1);                       // Configure DS18B20_PIN pin as output 
078A:  BSF    03.5
078B:  BCF    06.2
....................   delay_us(2);                                      // Wait 2 us 
078C:  GOTO   78D
078D:  GOTO   78E
....................   output_bit(DS18B20_PIN1, value1); 
078E:  BCF    03.5
078F:  MOVF   47,F
0790:  BTFSS  03.2
0791:  GOTO   794
0792:  BCF    06.2
0793:  GOTO   795
0794:  BSF    06.2
0795:  BSF    03.5
0796:  BCF    06.2
....................   delay_us(80);                                     // Wait 80 us 
0797:  MOVLW  34
0798:  MOVWF  77
0799:  DECFSZ 77,F
079A:  GOTO   799
079B:  GOTO   79C
079C:  NOP
....................   output_float(DS18B20_PIN1);                       // Configure DS18B20_PIN pin as input 
079D:  BSF    06.2
....................   delay_us(2);                                      // Wait 2 us 
079E:  GOTO   79F
079F:  GOTO   7A0
.................... }                             
....................                   
....................  
.................... void ds18b20_write_byte1(int8 value1){ 
....................   int8 a; 
....................   for(a = 0; a < 8; a++)                                    
*
0771:  CLRF   45
0772:  MOVF   45,W
0773:  SUBLW  07
0774:  BTFSS  03.0
0775:  GOTO   7A3
....................     ds18b20_write_bit1(bit_test(value1, a)); 
0776:  MOVF   44,W
0777:  MOVWF  77
0778:  MOVF   45,W
0779:  MOVWF  78
077A:  BTFSC  03.2
077B:  GOTO   780
077C:  BCF    03.0
077D:  RRF    77,F
077E:  DECFSZ 78,F
077F:  GOTO   77C
0780:  MOVLW  00
0781:  BTFSC  77.0
0782:  MOVLW  01
0783:  MOVWF  46
0784:  MOVF   46,W
0785:  MOVWF  47
*
07A0:  BCF    03.5
07A1:  INCF   45,F
07A2:  GOTO   772
07A3:  RETURN
.................... } 
....................  
....................  
.................... int1 ds18b20_read_bit1(void) {                        
....................   int1 value1; 
....................   output_low(DS18B20_PIN1); 
*
07AA:  BSF    03.5
07AB:  BCF    06.2
07AC:  BCF    03.5
07AD:  BCF    06.2
....................   output_drive(DS18B20_PIN1);                       // Configure DS18B20_PIN pin as output 
07AE:  BSF    03.5
07AF:  BCF    06.2
....................   delay_us(2); 
07B0:  GOTO   7B1
07B1:  GOTO   7B2
....................   output_float(DS18B20_PIN1);                       // Configure DS18B20_PIN pin as input                  
07B2:  BSF    06.2
....................   delay_us(5);                                      // Wait 5 us 
07B3:  MOVLW  02
07B4:  MOVWF  77
07B5:  DECFSZ 77,F
07B6:  GOTO   7B5
07B7:  GOTO   7B8
07B8:  NOP
....................   value1 = input(DS18B20_PIN1); 
07B9:  BSF    06.2
07BA:  BCF    03.5
07BB:  BCF    4A.0
07BC:  BTFSC  06.2
07BD:  BSF    4A.0
....................   delay_us(100);                                    // Wait 100 us 
07BE:  MOVLW  42
07BF:  MOVWF  77
07C0:  DECFSZ 77,F
07C1:  GOTO   7C0
07C2:  NOP
....................   return value1;       
07C3:  MOVLW  00
07C4:  BTFSC  4A.0
07C5:  MOVLW  01
07C6:  MOVWF  78
.................... }                            
....................                           
....................                     
.................... int8 ds18b20_read_byte1(void) {        
*
07A4:  CLRF   49
....................   int8 a, value1 = 0;                              
....................   for(a = 0; a  < 8; a++) 
07A5:  CLRF   48
07A6:  MOVF   48,W
07A7:  SUBLW  07
07A8:  BTFSS  03.0
07A9:  GOTO   7D0
....................     shift_right(&value1, 1, ds18b20_read_bit1()); 
*
07C7:  MOVF   78,F
07C8:  BTFSS  03.2
07C9:  GOTO   7CC
07CA:  BCF    03.0
07CB:  GOTO   7CD
07CC:  BSF    03.0
07CD:  RRF    49,F
07CE:  INCF   48,F
07CF:  GOTO   7A6
....................   return value1; 
07D0:  MOVF   49,W
07D1:  MOVWF  78
07D2:  RETURN
.................... } 
....................  
....................  
.................... int1 ds18b20_read1(int16 *raw_temp_value1) { 
....................   if (!ds18b20_start1())                                   // Send start pulse          
*
08CD:  BCF    0A.3
08CE:  CALL   747
08CF:  BSF    0A.3
08D0:  MOVF   78,F
08D1:  BTFSS  03.2
08D2:  GOTO   0D6
....................   return FALSE;  
08D3:  MOVLW  00
08D4:  MOVWF  78
08D5:  GOTO   134
....................   ds18b20_write_byte1(0xCC);                               // Send skip ROM command 
08D6:  MOVLW  CC
08D7:  MOVWF  44
08D8:  BCF    0A.3
08D9:  CALL   771
08DA:  BSF    0A.3
....................   ds18b20_write_byte1(0x44);                               // Send start conversion command 
08DB:  MOVLW  44
08DC:  MOVWF  44
08DD:  BCF    0A.3
08DE:  CALL   771
08DF:  BSF    0A.3
....................   while(ds18b20_read_byte1() == 0);                        // Wait for conversion complete 
08E0:  BCF    0A.3
08E1:  CALL   7A4
08E2:  BSF    0A.3
08E3:  MOVF   78,F
08E4:  BTFSC  03.2
08E5:  GOTO   0E0
....................   if (!ds18b20_start1()) {                                  // Send start pulse      
08E6:  BCF    0A.3
08E7:  CALL   747
08E8:  BSF    0A.3
08E9:  MOVF   78,F
08EA:  BTFSS  03.2
08EB:  GOTO   0EF
....................        return FALSE;                                          // Return 0 if error 
08EC:  MOVLW  00
08ED:  MOVWF  78
08EE:  GOTO   134
....................   }                                      
....................   ds18b20_write_byte1(0xCC);                               // Send skip ROM command 
08EF:  MOVLW  CC
08F0:  MOVWF  44
08F1:  BCF    0A.3
08F2:  CALL   771
08F3:  BSF    0A.3
....................   ds18b20_write_byte1(0xBE);                               // Send read command 
08F4:  MOVLW  BE
08F5:  MOVWF  44
08F6:  BCF    0A.3
08F7:  CALL   771
08F8:  BSF    0A.3
....................   *raw_temp_value1 = ds18b20_read_byte1();                 // Read temperature LSB byte and store it on raw_temp_value LSB byte 
08F9:  MOVF   43,W
08FA:  MOVWF  7A
08FB:  MOVF   42,W
08FC:  MOVWF  44
08FD:  MOVF   43,W
08FE:  MOVWF  45
08FF:  BCF    0A.3
0900:  CALL   7A4
0901:  BSF    0A.3
0902:  MOVF   44,W
0903:  MOVWF  04
0904:  BCF    03.7
0905:  BTFSC  45.0
0906:  BSF    03.7
0907:  INCF   04,F
0908:  CLRF   00
0909:  DECF   04,F
090A:  MOVF   78,W
090B:  MOVWF  00
....................   *raw_temp_value1 |= (int16)(ds18b20_read_byte1()) << 8;     // Read temperature MSB byte and store it on raw_temp_value MSB byte 
090C:  MOVF   43,W
090D:  MOVWF  7A
090E:  MOVF   42,W
090F:  MOVWF  44
0910:  MOVF   43,W
0911:  MOVWF  45
0912:  MOVF   42,W
0913:  MOVWF  04
0914:  BCF    03.7
0915:  BTFSC  43.0
0916:  BSF    03.7
0917:  INCF   04,F
0918:  MOVF   00,W
0919:  MOVWF  47
091A:  DECF   04,F
091B:  MOVF   00,W
091C:  MOVWF  46
091D:  BCF    0A.3
091E:  CALL   7A4
091F:  BSF    0A.3
0920:  CLRF   49
0921:  MOVLW  00
0922:  IORWF  46,W
0923:  MOVWF  77
0924:  MOVF   78,W
0925:  IORWF  47,W
0926:  MOVWF  7A
0927:  MOVF   44,W
0928:  MOVWF  04
0929:  BCF    03.7
092A:  BTFSC  45.0
092B:  BSF    03.7
092C:  INCF   04,F
092D:  MOVF   7A,W
092E:  MOVWF  00
092F:  DECF   04,F
0930:  MOVF   77,W
0931:  MOVWF  00
....................   return TRUE;                                                // OK --> return 1 
0932:  MOVLW  01
0933:  MOVWF  78
.................... }                                
....................  
....................  
.................... void Show_User_Info(){ 
....................       
....................   // Print Set: 
....................      lcd_gotoxy(10, 1);                                         
*
0578:  MOVLW  0A
0579:  MOVWF  50
057A:  MOVLW  01
057B:  MOVWF  51
057C:  CALL   13A
....................      lcd_putc("Set: "); 
057D:  MOVLW  0C
057E:  BSF    03.6
057F:  MOVWF  0D
0580:  MOVLW  00
0581:  MOVWF  0F
0582:  BCF    03.6
0583:  CALL   178
....................      lcd_gotoxy(14, 1); 
0584:  MOVLW  0E
0585:  MOVWF  50
0586:  MOVLW  01
0587:  MOVWF  51
0588:  CALL   13A
....................      printf(lcd_putc, "%3.0f",ButtonCounter);    
0589:  MOVLW  02
058A:  MOVWF  04
058B:  MOVF   2F,W
058C:  MOVWF  45
058D:  MOVF   2E,W
058E:  MOVWF  44
058F:  MOVF   2D,W
0590:  MOVWF  43
0591:  MOVF   2C,W
0592:  MOVWF  42
0593:  CLRF   46
0594:  CALL   353
....................       
....................    
....................   // Print Pwr:                                 
....................      lcd_gotoxy(10, 2);                  
0595:  MOVLW  0A
0596:  MOVWF  50
0597:  MOVLW  02
0598:  MOVWF  51
0599:  CALL   13A
....................      lcd_putc("Pwr:");                             
059A:  MOVLW  0F
059B:  BSF    03.6
059C:  MOVWF  0D
059D:  MOVLW  00
059E:  MOVWF  0F
059F:  BCF    03.6
05A0:  CALL   178
....................                                                   
....................   // Print V:                              
....................       lcd_gotoxy(1, 1);                           
05A1:  MOVLW  01
05A2:  MOVWF  50
05A3:  MOVWF  51
05A4:  CALL   13A
....................       printf(lcd_putc, "V: "); 
05A5:  MOVLW  56
05A6:  MOVWF  4F
05A7:  CALL   14C
05A8:  MOVLW  3A
05A9:  MOVWF  4F
05AA:  CALL   14C
05AB:  MOVLW  20
05AC:  MOVWF  4F
05AD:  CALL   14C
....................     
....................   // Print A:                            
....................       lcd_gotoxy(1, 2);     
05AE:  MOVLW  01
05AF:  MOVWF  50
05B0:  MOVLW  02
05B1:  MOVWF  51
05B2:  CALL   13A
....................       printf(lcd_putc, "A: "); 
05B3:  MOVLW  41
05B4:  MOVWF  4F
05B5:  CALL   14C
05B6:  MOVLW  3A
05B7:  MOVWF  4F
05B8:  CALL   14C
05B9:  MOVLW  20
05BA:  MOVWF  4F
05BB:  CALL   14C
05BC:  BSF    0A.3
05BD:  BCF    0A.4
05BE:  GOTO   29C (RETURN)
.................... }                                        
....................  
....................   
.................... void User_Buttons(){ 
....................  
....................  if(input(pin_B0) == 0) {              
*
04F1:  BSF    03.5
04F2:  BSF    06.0
04F3:  BCF    03.5
04F4:  BTFSC  06.0
04F5:  GOTO   538
....................    
....................           //lcd_init();                           
....................          // lcd_gotoxy(14,1); 
....................           lcd_gotoxy(6,2);    
04F6:  MOVLW  06
04F7:  MOVWF  50
04F8:  MOVLW  02
04F9:  MOVWF  51
04FA:  CALL   13A
....................           ButtonCounter = ButtonCounter+5;                                                                                                 
04FB:  BCF    03.1
04FC:  MOVF   2F,W
04FD:  MOVWF  45
04FE:  MOVF   2E,W
04FF:  MOVWF  44
0500:  MOVF   2D,W
0501:  MOVWF  43
0502:  MOVF   2C,W
0503:  MOVWF  42
0504:  CLRF   49
0505:  CLRF   48
0506:  MOVLW  20
0507:  MOVWF  47
0508:  MOVLW  81
0509:  MOVWF  46
050A:  CALL   1C3
050B:  MOVF   7A,W
050C:  MOVWF  2F
050D:  MOVF   79,W
050E:  MOVWF  2E
050F:  MOVF   78,W
0510:  MOVWF  2D
0511:  MOVF   77,W
0512:  MOVWF  2C
....................           printf(lcd_putc, "%3.0f",ButtonCounter);     
0513:  MOVLW  02
0514:  MOVWF  04
0515:  MOVF   2F,W
0516:  MOVWF  45
0517:  MOVF   2E,W
0518:  MOVWF  44
0519:  MOVF   2D,W
051A:  MOVWF  43
051B:  MOVF   2C,W
051C:  MOVWF  42
051D:  CLRF   46
051E:  CALL   353
....................          // output_high(PIN_D7);                      
....................          // delay_ms(2000);              
....................                                    
....................     if (ButtonCounter == max){    
051F:  MOVF   2F,W
0520:  MOVWF  45
0521:  MOVF   2E,W
0522:  MOVWF  44
0523:  MOVF   2D,W
0524:  MOVWF  43
0525:  MOVF   2C,W
0526:  MOVWF  42
0527:  MOVF   27,W
0528:  MOVWF  49
0529:  MOVF   26,W
052A:  MOVWF  48
052B:  MOVF   25,W
052C:  MOVWF  47
052D:  MOVF   24,W
052E:  MOVWF  46
052F:  CALL   4A6
0530:  BTFSS  03.2
0531:  GOTO   538
....................             ButtonCounter = 10;                            
0532:  CLRF   2F
0533:  CLRF   2E
0534:  MOVLW  20
0535:  MOVWF  2D
0536:  MOVLW  82
0537:  MOVWF  2C
....................       }                            
....................  }                                           
....................                                                                                                                                                                                                                                                                                                                                                                                       
.................... if(input(pin_B4) == 0) {           
0538:  BSF    03.5
0539:  BSF    06.4
053A:  BCF    03.5
053B:  BTFSC  06.4
053C:  GOTO   566
....................                                        
....................          // lcd_gotoxy(14,1); 
....................           lcd_gotoxy(6,2);  
053D:  MOVLW  06
053E:  MOVWF  50
053F:  MOVLW  02
0540:  MOVWF  51
0541:  CALL   13A
....................           ButtonCounter = ButtonCounter-5;                                          
0542:  BSF    03.1
0543:  MOVF   2F,W
0544:  MOVWF  45
0545:  MOVF   2E,W
0546:  MOVWF  44
0547:  MOVF   2D,W
0548:  MOVWF  43
0549:  MOVF   2C,W
054A:  MOVWF  42
054B:  CLRF   49
054C:  CLRF   48
054D:  MOVLW  20
054E:  MOVWF  47
054F:  MOVLW  81
0550:  MOVWF  46
0551:  CALL   1C3
0552:  MOVF   7A,W
0553:  MOVWF  2F
0554:  MOVF   79,W
0555:  MOVWF  2E
0556:  MOVF   78,W
0557:  MOVWF  2D
0558:  MOVF   77,W
0559:  MOVWF  2C
....................           printf(lcd_putc, "%3.0f",ButtonCounter); 
055A:  MOVLW  02
055B:  MOVWF  04
055C:  MOVF   2F,W
055D:  MOVWF  45
055E:  MOVF   2E,W
055F:  MOVWF  44
0560:  MOVF   2D,W
0561:  MOVWF  43
0562:  MOVF   2C,W
0563:  MOVWF  42
0564:  CLRF   46
0565:  CALL   353
....................          // output_high(PIN_D7);                       
....................          // delay_ms(2000);                     
....................    /*                               
....................      if (ButtonCounter <= min){                   
....................             ButtonCounter = 10;                
....................       } 
....................       */ 
....................    }  
....................    /* 
....................      if(ButtonCounter == 10 || ButtonCounter == 0){    
....................            output_low(pin_B5);                   
....................           // delay_ms(5000);             
....................            lcd_gotoxy(14, 2);                                   
....................            printf(lcd_putc, "Off ");       
....................     }                                           
....................     */ 
.................... }                               
....................  
....................                                                              
.................... void Compare_Upper_Temp(){ 
....................  
.................... // Reset pump on flag           
.................... On_flag == 0; 
*
09B3:  MOVF   3C,F
09B4:  BTFSS  03.2
09B5:  MOVLW  00
....................                        
....................         
.................... if (temp1 >= ButtonCounter){           
09B6:  MOVF   2F,W
09B7:  MOVWF  45
09B8:  MOVF   2E,W
09B9:  MOVWF  44
09BA:  MOVF   2D,W
09BB:  MOVWF  43
09BC:  MOVF   2C,W
09BD:  MOVWF  42
09BE:  MOVF   37,W
09BF:  MOVWF  49
09C0:  MOVF   36,W
09C1:  MOVWF  48
09C2:  MOVF   35,W
09C3:  MOVWF  47
09C4:  MOVF   34,W
09C5:  MOVWF  46
09C6:  BCF    0A.3
09C7:  CALL   4A6
09C8:  BSF    0A.3
09C9:  BTFSC  03.0
09CA:  GOTO   1CD
09CB:  BTFSS  03.2
09CC:  GOTO   1EB
....................         output_high(pin_B5);                    
09CD:  BSF    03.5
09CE:  BCF    06.5
09CF:  BCF    03.5
09D0:  BSF    06.5
....................        // delay_ms(5000);                            
....................         lcd_gotoxy(14, 2);             
09D1:  MOVLW  0E
09D2:  MOVWF  50
09D3:  MOVLW  02
09D4:  MOVWF  51
09D5:  BCF    0A.3
09D6:  CALL   13A
09D7:  BSF    0A.3
....................         printf(lcd_putc, "On ");                           
09D8:  MOVLW  4F
09D9:  MOVWF  4F
09DA:  BCF    0A.3
09DB:  CALL   14C
09DC:  BSF    0A.3
09DD:  MOVLW  6E
09DE:  MOVWF  4F
09DF:  BCF    0A.3
09E0:  CALL   14C
09E1:  BSF    0A.3
09E2:  MOVLW  20
09E3:  MOVWF  4F
09E4:  BCF    0A.3
09E5:  CALL   14C
09E6:  BSF    0A.3
....................         On_flag == 1;                        
09E7:  DECFSZ 3C,W
09E8:  GOTO   1EA
09E9:  GOTO   1EB
09EA:  MOVLW  00
....................     }      
....................                                        
....................       if (ButtonCounter <= min){                   
09EB:  MOVF   2F,W
09EC:  MOVWF  45
09ED:  MOVF   2E,W
09EE:  MOVWF  44
09EF:  MOVF   2D,W
09F0:  MOVWF  43
09F1:  MOVF   2C,W
09F2:  MOVWF  42
09F3:  MOVF   23,W
09F4:  MOVWF  49
09F5:  MOVF   22,W
09F6:  MOVWF  48
09F7:  MOVF   21,W
09F8:  MOVWF  47
09F9:  MOVF   20,W
09FA:  MOVWF  46
09FB:  BCF    0A.3
09FC:  CALL   4A6
09FD:  BSF    0A.3
09FE:  BTFSC  03.0
09FF:  GOTO   202
0A00:  BTFSS  03.2
0A01:  GOTO   208
....................             //ButtonCounter = 10;                         
....................             ButtonCounter = 5;    
0A02:  CLRF   2F
0A03:  CLRF   2E
0A04:  MOVLW  20
0A05:  MOVWF  2D
0A06:  MOVLW  81
0A07:  MOVWF  2C
....................       }                                             
....................                          
....................       if(ButtonCounter == 10 || ButtonCounter == 5 || ButtonCounter == 0){     
0A08:  MOVF   2F,W
0A09:  MOVWF  45
0A0A:  MOVF   2E,W
0A0B:  MOVWF  44
0A0C:  MOVF   2D,W
0A0D:  MOVWF  43
0A0E:  MOVF   2C,W
0A0F:  MOVWF  42
0A10:  CLRF   49
0A11:  CLRF   48
0A12:  MOVLW  20
0A13:  MOVWF  47
0A14:  MOVLW  82
0A15:  MOVWF  46
0A16:  BCF    0A.3
0A17:  CALL   4A6
0A18:  BSF    0A.3
0A19:  BTFSC  03.2
0A1A:  GOTO   23F
0A1B:  MOVF   2F,W
0A1C:  MOVWF  45
0A1D:  MOVF   2E,W
0A1E:  MOVWF  44
0A1F:  MOVF   2D,W
0A20:  MOVWF  43
0A21:  MOVF   2C,W
0A22:  MOVWF  42
0A23:  CLRF   49
0A24:  CLRF   48
0A25:  MOVLW  20
0A26:  MOVWF  47
0A27:  MOVLW  81
0A28:  MOVWF  46
0A29:  BCF    0A.3
0A2A:  CALL   4A6
0A2B:  BSF    0A.3
0A2C:  BTFSC  03.2
0A2D:  GOTO   23F
0A2E:  MOVF   2F,W
0A2F:  MOVWF  45
0A30:  MOVF   2E,W
0A31:  MOVWF  44
0A32:  MOVF   2D,W
0A33:  MOVWF  43
0A34:  MOVF   2C,W
0A35:  MOVWF  42
0A36:  CLRF   49
0A37:  CLRF   48
0A38:  CLRF   47
0A39:  CLRF   46
0A3A:  BCF    0A.3
0A3B:  CALL   4A6
0A3C:  BSF    0A.3
0A3D:  BTFSS  03.2
0A3E:  GOTO   256
....................            output_low(pin_B5);                   
0A3F:  BSF    03.5
0A40:  BCF    06.5
0A41:  BCF    03.5
0A42:  BCF    06.5
....................           // delay_ms(5000);              
....................            lcd_gotoxy(14, 2);                                
0A43:  MOVLW  0E
0A44:  MOVWF  50
0A45:  MOVLW  02
0A46:  MOVWF  51
0A47:  BCF    0A.3
0A48:  CALL   13A
0A49:  BSF    0A.3
....................            printf(lcd_putc, "Off ");                                            
0A4A:  MOVLW  12
0A4B:  BSF    03.6
0A4C:  MOVWF  0D
0A4D:  MOVLW  00
0A4E:  MOVWF  0F
0A4F:  BCF    0A.3
0A50:  BCF    03.6
0A51:  CALL   178
0A52:  BSF    0A.3
....................            On_flag == 0;                                      
0A53:  MOVF   3C,F
0A54:  BTFSS  03.2
0A55:  MOVLW  00
....................     } 
0A56:  BSF    0A.3
0A57:  BCF    0A.4
0A58:  GOTO   2C9 (RETURN)
.................... }                                                 
....................              
.................... void Bottom_Waiting_Animation(){ 
....................          
....................  delay_ms(50);        
....................  lcd_gotoxy(4, 2);                       
....................  printf(lcd_putc, ".");                                
....................  lcd_gotoxy(5, 2);                       
....................  printf(lcd_putc, ".");                       
....................                                                                           
....................                                                                            
....................  delay_ms(50);                               
....................  lcd_gotoxy(4, 2);       
....................  printf(lcd_putc, "");             
....................  lcd_gotoxy(5, 2);       
....................  printf(lcd_putc, "");                           
.................... }    
....................  
....................  
.................... void Read_Sensors(){ 
....................   
....................  // Starting to read temperatures from the sensors                                                              
....................     if(ds18b20_read(&raw_temp)) { 
*
0800:  CLRF   43
0801:  MOVLW  28
0802:  MOVWF  42
*
086A:  MOVF   78,F
086B:  BTFSC  03.2
086C:  GOTO   0CA
....................       temp == Old_temp; 
086D:  MOVF   33,W
086E:  MOVWF  45
086F:  MOVF   32,W
0870:  MOVWF  44
0871:  MOVF   31,W
0872:  MOVWF  43
0873:  MOVF   30,W
0874:  MOVWF  42
0875:  MOVF   3B,W
0876:  MOVWF  49
0877:  MOVF   3A,W
0878:  MOVWF  48
0879:  MOVF   39,W
087A:  MOVWF  47
087B:  MOVF   38,W
087C:  MOVWF  46
087D:  BCF    0A.3
087E:  CALL   4A6
087F:  BSF    0A.3
....................       temp = (float)raw_temp / 16;               // Convert temperature raw value into degree Celsius (temp in ?C = raw/16)  
0880:  MOVF   29,W
0881:  MOVWF  43
0882:  MOVF   28,W
0883:  MOVWF  42
0884:  BCF    0A.3
0885:  CALL   658
0886:  BSF    0A.3
0887:  MOVF   7A,W
0888:  MOVWF  45
0889:  MOVF   79,W
088A:  MOVWF  44
088B:  MOVF   78,W
088C:  MOVWF  43
088D:  MOVF   77,W
088E:  MOVWF  42
088F:  MOVF   45,W
0890:  MOVWF  49
0891:  MOVF   44,W
0892:  MOVWF  48
0893:  MOVF   43,W
0894:  MOVWF  47
0895:  MOVF   42,W
0896:  MOVWF  46
0897:  CLRF   4D
0898:  CLRF   4C
0899:  CLRF   4B
089A:  MOVLW  83
089B:  MOVWF  4A
089C:  BCF    0A.3
089D:  CALL   67D
089E:  BSF    0A.3
089F:  MOVF   7A,W
08A0:  MOVWF  33
08A1:  MOVF   79,W
08A2:  MOVWF  32
08A3:  MOVF   78,W
08A4:  MOVWF  31
08A5:  MOVF   77,W
08A6:  MOVWF  30
....................    //   lcd_gotoxy(1, 1);                          // Go to column 5 row 2 
....................    //   printf(lcd_putc, "V: ");                                                           
....................       lcd_gotoxy(3, 2);             
08A7:  MOVLW  03
08A8:  MOVWF  50
08A9:  MOVLW  02
08AA:  MOVWF  51
08AB:  BCF    0A.3
08AC:  CALL   13A
08AD:  BSF    0A.3
....................       printf(lcd_putc, "%3.0f", temp);                                                                                                           
08AE:  MOVLW  02
08AF:  MOVWF  04
08B0:  MOVF   33,W
08B1:  MOVWF  45
08B2:  MOVF   32,W
08B3:  MOVWF  44
08B4:  MOVF   31,W
08B5:  MOVWF  43
08B6:  MOVF   30,W
08B7:  MOVWF  42
08B8:  CLRF   46
08B9:  BCF    0A.3
08BA:  CALL   353
08BB:  BSF    0A.3
....................       lcd_putc(223);                             // Print degree symbol ( ? ) 
08BC:  MOVLW  DF
08BD:  MOVWF  4F
08BE:  BCF    0A.3
08BF:  CALL   14C
08C0:  BSF    0A.3
....................       lcd_putc("C; ");                            // Print 'C ' 
08C1:  MOVLW  15
08C2:  BSF    03.6
08C3:  MOVWF  0D
08C4:  MOVLW  00
08C5:  MOVWF  0F
08C6:  BCF    0A.3
08C7:  BCF    03.6
08C8:  CALL   178
08C9:  BSF    0A.3
....................       //lcd_gotoxy(10, 1);     
....................       //lcd_putc("Set:  ");                            // Print 'C '          
....................     }                             
....................                                                                               
....................                                                                                                                 
....................      if(ds18b20_read1(&raw_temp1)) {                                     
08CA:  CLRF   43
08CB:  MOVLW  2A
08CC:  MOVWF  42
*
0934:  MOVF   78,F
0935:  BTFSC  03.2
0936:  GOTO   182
....................       temp1 = (float)raw_temp1 / 16;               // Convert temperature raw value into degree Celsius (temp in ?C = raw/16)    
0937:  MOVF   2B,W
0938:  MOVWF  43
0939:  MOVF   2A,W
093A:  MOVWF  42
093B:  BCF    0A.3
093C:  CALL   658
093D:  BSF    0A.3
093E:  MOVF   7A,W
093F:  MOVWF  45
0940:  MOVF   79,W
0941:  MOVWF  44
0942:  MOVF   78,W
0943:  MOVWF  43
0944:  MOVF   77,W
0945:  MOVWF  42
0946:  MOVF   45,W
0947:  MOVWF  49
0948:  MOVF   44,W
0949:  MOVWF  48
094A:  MOVF   43,W
094B:  MOVWF  47
094C:  MOVF   42,W
094D:  MOVWF  46
094E:  CLRF   4D
094F:  CLRF   4C
0950:  CLRF   4B
0951:  MOVLW  83
0952:  MOVWF  4A
0953:  BCF    0A.3
0954:  CALL   67D
0955:  BSF    0A.3
0956:  MOVF   7A,W
0957:  MOVWF  37
0958:  MOVF   79,W
0959:  MOVWF  36
095A:  MOVF   78,W
095B:  MOVWF  35
095C:  MOVF   77,W
095D:  MOVWF  34
....................      // lcd_gotoxy(1, 2);   
....................      // printf(lcd_putc, "A: ");// Go to column 5 row 2 
....................       lcd_gotoxy(3, 1);                                       
095E:  MOVLW  03
095F:  MOVWF  50
0960:  MOVLW  01
0961:  MOVWF  51
0962:  BCF    0A.3
0963:  CALL   13A
0964:  BSF    0A.3
....................       printf(lcd_putc, "%3.0f", temp1); 
0965:  MOVLW  02
0966:  MOVWF  04
0967:  MOVF   37,W
0968:  MOVWF  45
0969:  MOVF   36,W
096A:  MOVWF  44
096B:  MOVF   35,W
096C:  MOVWF  43
096D:  MOVF   34,W
096E:  MOVWF  42
096F:  CLRF   46
0970:  BCF    0A.3
0971:  CALL   353
0972:  BSF    0A.3
....................       lcd_putc(223);                             // Print degree symbol ( ? ) 
0973:  MOVLW  DF
0974:  MOVWF  4F
0975:  BCF    0A.3
0976:  CALL   14C
0977:  BSF    0A.3
....................       lcd_putc("C; ");                            // Print 'C '                                    
0978:  MOVLW  17
0979:  BSF    03.6
097A:  MOVWF  0D
097B:  MOVLW  00
097C:  MOVWF  0F
097D:  BCF    0A.3
097E:  BCF    03.6
097F:  CALL   178
0980:  BSF    0A.3
....................                                                       
....................      // lcd_gotoxy(10, 2);                            
....................     //  lcd_putc("Pwr:  ");                            // Print 'C '                                                                                                                                     
....................      }                                            
0981:  GOTO   1B2
....................          
....................      else     
....................    {               
....................                            
....................     //  An error "handler" is generated if V sensor is not present        
....................      // output_high(PIN_D7); 
....................       lcd_putc('\f');                             // LCD clear 
0982:  MOVLW  0C
0983:  MOVWF  4F
0984:  BCF    0A.3
0985:  CALL   14C
0986:  BSF    0A.3
....................       lcd_gotoxy(5, 1);                          // Go to column 5 row 2 
0987:  MOVLW  05
0988:  MOVWF  50
0989:  MOVLW  01
098A:  MOVWF  51
098B:  BCF    0A.3
098C:  CALL   13A
098D:  BSF    0A.3
....................       printf(lcd_putc, "Davikliu");           
098E:  MOVLW  19
098F:  BSF    03.6
0990:  MOVWF  0D
0991:  MOVLW  00
0992:  MOVWF  0F
0993:  BCF    0A.3
0994:  BCF    03.6
0995:  CALL   178
0996:  BSF    0A.3
....................       lcd_gotoxy(5, 2);                                                  
0997:  MOVLW  05
0998:  MOVWF  50
0999:  MOVLW  02
099A:  MOVWF  51
099B:  BCF    0A.3
099C:  CALL   13A
099D:  BSF    0A.3
....................       printf(lcd_putc, "klaida!");                          
099E:  MOVLW  1E
099F:  BSF    03.6
09A0:  MOVWF  0D
09A1:  MOVLW  00
09A2:  MOVWF  0F
09A3:  BCF    0A.3
09A4:  BCF    03.6
09A5:  CALL   178
09A6:  BSF    0A.3
....................       delay_ms(3000);                                            
09A7:  MOVLW  0C
09A8:  MOVWF  42
09A9:  MOVLW  FA
09AA:  MOVWF  50
09AB:  BCF    0A.3
09AC:  CALL   030
09AD:  BSF    0A.3
09AE:  DECFSZ 42,F
09AF:  GOTO   1A9
....................       reset_cpu();        // Restart CPU     
09B0:  CLRF   0A
09B1:  GOTO   000
....................    }                             
09B2:  RETURN
....................                            
....................     /*                                                                                                                      
....................        // In case of total CPU failure 
....................     else {                                                          
....................       lcd_putc('\f');                             // LCD clear 
....................       lcd_gotoxy(5, 2);                          // Go to column 5 row 2 
....................       printf(lcd_putc, " Klaida! "); 
....................       delay_ms(3000);                                            
....................       reset_cpu();        // Restart CPU     
....................     }                        
....................  */                                                                         
....................  
....................                                           
.................... }                              
....................  
....................  
.................... void User_Set_Mode(){                               
....................       
....................     // lcd_putc('\f');                             // LCD clear 
....................      lcd_gotoxy(3, 1);                          // Go to column 5 row 2 
*
04E5:  MOVLW  03
04E6:  MOVWF  50
04E7:  MOVLW  01
04E8:  MOVWF  51
04E9:  CALL   13A
....................      printf(lcd_putc, "Nustatykite: ");                      
04EA:  MOVLW  22
04EB:  BSF    03.6
04EC:  MOVWF  0D
04ED:  MOVLW  00
04EE:  MOVWF  0F
04EF:  BCF    03.6
04F0:  CALL   178
....................      User_Buttons(); 
....................    //  delay_ms(200);  
....................      lcd_gotoxy(9, 2);                          // Go to column 5 row 2 
*
0566:  MOVLW  09
0567:  MOVWF  50
0568:  MOVLW  02
0569:  MOVWF  51
056A:  CALL   13A
....................      lcd_putc(223);                             // Print degree symbol ( ? ) 
056B:  MOVLW  DF
056C:  MOVWF  4F
056D:  CALL   14C
....................      lcd_putc("C");                            // Print 'C ' 
056E:  MOVLW  29
056F:  BSF    03.6
0570:  MOVWF  0D
0571:  MOVLW  00
0572:  MOVWF  0F
0573:  BCF    03.6
0574:  CALL   178
0575:  BSF    0A.3
0576:  BCF    0A.4
0577:  GOTO   286 (RETURN)
....................       
....................    /*   
....................      lcd_gotoxy(8, 2);                          // Go to column 5 row 2 
....................      printf(lcd_putc, "__"); 
....................       
....................      delay_ms(500);                 
....................      lcd_gotoxy(8, 2);                          // Go to column 5 row 2 
....................      printf(lcd_putc, "  "); 
....................       
....................      delay_ms(500); 
....................      lcd_gotoxy(8, 2);                          // Go to column 5 row 2 
....................      printf(lcd_putc, "__"); 
....................   */    
....................       
.................... }                                                    
....................                                                             
....................                                
.................... #endif // MAIN_H                                      
....................                    
....................   
....................  
....................                                      
.................... // "Flag", indicating that the pump is switched on     
.................... //extern int On_flag;                                                                                                                                                   
....................                                                    
.................... void main() {                          
*
0A59:  MOVF   03,W
0A5A:  ANDLW  1F
0A5B:  MOVWF  03
0A5C:  CLRF   23
0A5D:  CLRF   22
0A5E:  CLRF   21
0A5F:  CLRF   20
0A60:  CLRF   27
0A61:  CLRF   26
0A62:  MOVLW  48
0A63:  MOVWF  25
0A64:  MOVLW  85
0A65:  MOVWF  24
0A66:  CLRF   2F
0A67:  CLRF   2E
0A68:  MOVLW  20
0A69:  MOVWF  2D
0A6A:  MOVLW  82
0A6B:  MOVWF  2C
0A6C:  BSF    03.5
0A6D:  BSF    1F.0
0A6E:  BSF    1F.1
0A6F:  BSF    1F.2
0A70:  BCF    1F.3
0A71:  MOVLW  07
0A72:  MOVWF  1C
0A73:  BCF    03.7
....................  
.................... //Turn on LCD backlight                     
.................... output_high(PIN_D7); 
0A74:  BCF    08.7
0A75:  BCF    03.5
0A76:  BSF    08.7
....................  
.................... // Initialize LCD module 
.................... lcd_init(); 
0A77:  BCF    0A.3
0A78:  GOTO   0FD
0A79:  BSF    0A.3
....................                          
....................                                  
.................... // Keep the pump off, until the user doesn't set the temperature!!!                      
.................... output_low(PIN_B5);            
0A7A:  BSF    03.5
0A7B:  BCF    06.5
0A7C:  BCF    03.5
0A7D:  BCF    06.5
....................                                                        
.................... float Min_Threshold_Value = 41;        
0A7E:  CLRF   41
0A7F:  CLRF   40
0A80:  MOVLW  24
0A81:  MOVWF  3F
0A82:  MOVLW  84
0A83:  MOVWF  3E
....................                                               
....................                                  
.................... // Start doing user temperature set mode routine.                                                                                 
.................... do{                                                       
....................  User_Set_Mode();                                  
0A84:  BCF    0A.3
0A85:  GOTO   4E5
0A86:  BSF    0A.3
....................  delay_ms(300);                  // Debounce feature for the buttons 
0A87:  MOVLW  02
0A88:  MOVWF  42
0A89:  MOVLW  96
0A8A:  MOVWF  50
0A8B:  BCF    0A.3
0A8C:  CALL   030
0A8D:  BSF    0A.3
0A8E:  DECFSZ 42,F
0A8F:  GOTO   289
.................... }                                                                         
....................                                                                        
.................... while(input(pin_B0) == 1 || input(pin_B4) == 1);                                          
0A90:  BSF    03.5
0A91:  BSF    06.0
0A92:  BCF    03.5
0A93:  BTFSC  06.0
0A94:  GOTO   284
0A95:  BSF    03.5
0A96:  BSF    06.4
0A97:  BCF    03.5
0A98:  BTFSC  06.4
0A99:  GOTO   284
....................                                                                       
.................... break; 
.................... continue; 
....................     
.................... Show_User_Info();                                                 
0A9A:  BCF    0A.3
0A9B:  GOTO   578
0A9C:  BSF    0A.3
.................... delay_ms(10);                                     
0A9D:  MOVLW  0A
0A9E:  MOVWF  50
0A9F:  BCF    0A.3
0AA0:  CALL   030
0AA1:  BSF    0A.3
....................                                                            
.................... lcd_gotoxy(14, 2);                                   
0AA2:  MOVLW  0E
0AA3:  MOVWF  50
0AA4:  MOVLW  02
0AA5:  MOVWF  51
0AA6:  BCF    0A.3
0AA7:  CALL   13A
0AA8:  BSF    0A.3
.................... printf(lcd_putc, "Off ");                                                             
0AA9:  MOVLW  2A
0AAA:  BSF    03.6
0AAB:  MOVWF  0D
0AAC:  MOVLW  00
0AAD:  MOVWF  0F
0AAE:  BCF    0A.3
0AAF:  BCF    03.6
0AB0:  CALL   178
0AB1:  BSF    0A.3
....................   
....................                                      
.................... while(TRUE){                                                                                  
....................   //Turn on LCD backlight                               
....................   //output_high(PIN_D7);    
....................  
....................                                              
....................   Read_Sensors();               
0AB2:  CALL   000
....................  
....................  
.................... // Starting to read user button values  
.................... //User_Buttons();     
....................  
.................... //delay_ms(20);               // Minimum amount of time to read user button  values     
....................  
....................  
.................... // Starting to compare user set temperature value and upper sensor temperature  read value.                                                                                               
.................... //Compare_Upper_Temp();    
.................... //delay_ms(20);               // Minimum amount of time to  compare user set temperature value and upper sensor temperature  read value.                                                                
....................                                   
....................   
....................         
....................  
....................                                                                                                                                                                      
.................... //================================      
....................                                                                                                                                                                                            
.................... // If the pump is switched on, we starting to make actions according to the bottom temperature value.                                                                                               
....................           
....................       // Checking, if the MCU pin connected to pump is high. If yes - do the bottom animation                                             
....................        // if(input(PIN_B5)){        
....................      // Gal whailui reikia didesnio delay tarp komandu vykdymo, nes ne visada issijungia siurblys...?  
....................           while(temp < Min_Threshold_Value){            
0AB3:  MOVF   33,W
0AB4:  MOVWF  45
0AB5:  MOVF   32,W
0AB6:  MOVWF  44
0AB7:  MOVF   31,W
0AB8:  MOVWF  43
0AB9:  MOVF   30,W
0ABA:  MOVWF  42
0ABB:  MOVF   41,W
0ABC:  MOVWF  49
0ABD:  MOVF   40,W
0ABE:  MOVWF  48
0ABF:  MOVF   3F,W
0AC0:  MOVWF  47
0AC1:  MOVF   3E,W
0AC2:  MOVWF  46
0AC3:  BCF    0A.3
0AC4:  CALL   4A6
0AC5:  BSF    0A.3
0AC6:  BTFSS  03.0
0AC7:  GOTO   2D4
....................             // Starting to compare user set temperature value and upper sensor temperature  read value.                                                                                               
....................             Compare_Upper_Temp(); 
0AC8:  GOTO   1B3
....................             delay_ms(500); 
0AC9:  MOVLW  02
0ACA:  MOVWF  42
0ACB:  MOVLW  FA
0ACC:  MOVWF  50
0ACD:  BCF    0A.3
0ACE:  CALL   030
0ACF:  BSF    0A.3
0AD0:  DECFSZ 42,F
0AD1:  GOTO   2CB
....................             Read_Sensors();                                            
0AD2:  CALL   000
0AD3:  GOTO   2B3
.................... } 
....................            
....................           while(temp > Min_Threshold_Value){      
0AD4:  MOVF   41,W
0AD5:  MOVWF  45
0AD6:  MOVF   40,W
0AD7:  MOVWF  44
0AD8:  MOVF   3F,W
0AD9:  MOVWF  43
0ADA:  MOVF   3E,W
0ADB:  MOVWF  42
0ADC:  MOVF   33,W
0ADD:  MOVWF  49
0ADE:  MOVF   32,W
0ADF:  MOVWF  48
0AE0:  MOVF   31,W
0AE1:  MOVWF  47
0AE2:  MOVF   30,W
0AE3:  MOVWF  46
0AE4:  BCF    0A.3
0AE5:  CALL   4A6
0AE6:  BSF    0A.3
0AE7:  BTFSS  03.0
0AE8:  GOTO   2EB
....................                                                                                                           
....................            Read_Sensors();           
0AE9:  CALL   000
0AEA:  GOTO   2D4
....................                                              
....................           }                                                                                              
....................           
....................             delay_ms(1000); 
0AEB:  MOVLW  04
0AEC:  MOVWF  42
0AED:  MOVLW  FA
0AEE:  MOVWF  50
0AEF:  BCF    0A.3
0AF0:  CALL   030
0AF1:  BSF    0A.3
0AF2:  DECFSZ 42,F
0AF3:  GOTO   2ED
....................             Read_Sensors();                                                           
0AF4:  CALL   000
....................           
....................          if(temp < Min_Threshold_Value){ 
0AF5:  MOVF   33,W
0AF6:  MOVWF  45
0AF7:  MOVF   32,W
0AF8:  MOVWF  44
0AF9:  MOVF   31,W
0AFA:  MOVWF  43
0AFB:  MOVF   30,W
0AFC:  MOVWF  42
0AFD:  MOVF   41,W
0AFE:  MOVWF  49
0AFF:  MOVF   40,W
0B00:  MOVWF  48
0B01:  MOVF   3F,W
0B02:  MOVWF  47
0B03:  MOVF   3E,W
0B04:  MOVWF  46
0B05:  BCF    0A.3
0B06:  CALL   4A6
0B07:  BSF    0A.3
0B08:  BTFSS  03.0
0B09:  GOTO   31E
....................                                                     
....................             output_low(pin_B5);                  // Switch pump off                     
0B0A:  BSF    03.5
0B0B:  BCF    06.5
0B0C:  BCF    03.5
0B0D:  BCF    06.5
....................             // delay_ms(5000);                           
....................             lcd_gotoxy(14, 2);                                   
0B0E:  MOVLW  0E
0B0F:  MOVWF  50
0B10:  MOVLW  02
0B11:  MOVWF  51
0B12:  BCF    0A.3
0B13:  CALL   13A
0B14:  BSF    0A.3
....................             printf(lcd_putc, "Off ");                         
0B15:  MOVLW  2D
0B16:  BSF    03.6
0B17:  MOVWF  0D
0B18:  MOVLW  00
0B19:  MOVWF  0F
0B1A:  BCF    0A.3
0B1B:  BCF    03.6
0B1C:  CALL   178
0B1D:  BSF    0A.3
....................                                                      
.................... }                                                                
0B1E:  GOTO   2B2
....................         //    {                                        
....................          //   output_high(pin_B5);                 // Switch pump on              
....................            // Bottom_Waiting_Animation(); 
....................          //   delay_ms(2000);                                   
....................            // Read_Sensors();                  
....................   /*                                    
....................             if(temp < Min_Threshold_Value){                           
....................                                             
....................              output_low(pin_B5);                  // Switch pump off                     
....................             // delay_ms(5000);                           
....................             lcd_gotoxy(14, 2);                                   
....................             printf(lcd_putc, "Off ");                                                         
....................             }                  
....................   }                          
.................... */                                              
....................          //   }                                        
....................            // break;                 
....................           //  continue;                      
....................                          
....................       /*                                      
....................         if(input(PIN_B5)){                           
....................                                                                                        
....................           while(temp < Min_Threshold_Value)                 
....................             {                              
....................             output_high(pin_B5);                 // Switch pump on                                 
....................             Bottom_Waiting_Animation();  
....................             }                          
....................            // break;  
....................            // continue;          
.................... }                          
....................                                                                                
....................    */   
....................    /* 
....................  // Control and last one check: If the set temp is less than threshold - turn the pump off. 
....................  if(temp < Min_Threshold_Value){ 
....................          
....................       input(PIN_B5) == 0;               
.................... }                                            
....................       
....................                                                          
....................       /*                                   
....................             output_low(pin_B5);                  // Switch pump off                     
....................             // delay_ms(5000);                           
....................             lcd_gotoxy(14, 2);                                  
....................             printf(lcd_putc, "Off ");         
....................         */                                      
....................                                                                          
....................      // Check, if bottom temperature is higher than minimal threshold value. If no - turn the pump off. 
....................      /* 
....................         if(temp < 40){                     
....................                              
....................               output_low(pin_B5);                 // Switch pump off     
....................             // delay_ms(5000);                           
....................              lcd_gotoxy(14, 2);                                  
....................              printf(lcd_putc, "Off ");         
....................                                                                            
....................          }  
....................          */                                                           
....................                                        
....................       
....................        /*                                             
....................           if(temp1 < 25){  
....................                  
....................               output_low(pin_B5);                      
....................             // delay_ms(5000);                           
....................              lcd_gotoxy(14, 2);                                  
....................              printf(lcd_putc, "Off ");         
....................                                          
....................              }             
....................              */                                        
....................              
....................  // reset_cpu();  
....................                            
....................        }                                                                                                                                                                                   
.................... } 
....................   
0B1F:  SLEEP
....................     // End of code 
....................                                                                                                   

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
